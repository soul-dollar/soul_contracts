{
	"id": "50169a1a3e6cc041c6b8398e0aa51f1f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.11",
	"solcLongVersion": "0.6.11+commit.5ef660b1",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/contracts/MeridianFallback.sol": {
				"content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\nimport {SafeMath} from './Dependencies/SafeMath.sol';\nimport \"./Dependencies/Ownable.sol\";\nimport {IPriceOracleGetter} from './Interfaces/IPriceOracleGetter.sol';\n\ncontract MeridianFallbackOracle1 is Ownable, IPriceOracleGetter {\n  using SafeMath for uint256;\n\n  struct Price {\n    uint64 blockNumber;\n    uint64 blockTimestamp;\n    uint128 price;\n  }\n\n  event PricesSubmitted(address sybil, address[] assets, uint128[] prices);\n  event SybilAuthorized(address indexed sybil);\n  event SybilUnauthorized(address indexed sybil);\n\n  uint256 public constant PERCENTAGE_BASE = 1e4;\n\n  mapping(address => Price) private _prices;\n\n  mapping(address => bool) private _sybils;\n\n  modifier onlySybil {\n    _requireWhitelistedSybil(msg.sender);\n    _;\n  }\n\n  function authorizeSybil(address sybil) external onlyOwner {\n    _sybils[sybil] = true;\n\n    emit SybilAuthorized(sybil);\n  }\n\n  function unauthorizeSybil(address sybil) external onlyOwner {\n    _sybils[sybil] = false;\n\n    emit SybilUnauthorized(sybil);\n  }\n\n  function submitPrices(address[] calldata assets, uint128[] calldata prices) external onlySybil {\n    require(assets.length == prices.length, 'INCONSISTENT_PARAMS_LENGTH');\n    for (uint256 i = 0; i < assets.length; i++) {\n      _prices[assets[i]] = Price(uint64(block.number), uint64(block.timestamp), prices[i]);\n    }\n\n    emit PricesSubmitted(msg.sender, assets, prices);\n  }\n\n  function getAssetPrice(address asset) external view override returns (uint256) {\n    return uint256(_prices[asset].price);\n  }\n\n  function isSybilWhitelisted(address sybil) public view returns (bool) {\n    return _sybils[sybil];\n  }\n\n\n  function _requireWhitelistedSybil(address sybil) internal view {\n    require(isSybilWhitelisted(sybil), 'INVALID_SYBIL');\n  }\n}"
			},
			"contracts/contracts/Interfaces/IPriceOracleGetter.sol": {
				"content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity 0.6.11;\n\n/**\n * @title IPriceOracleGetter interface\n * @notice Interface for the Meridian price oracle.\n **/\n\ninterface IPriceOracleGetter {\n  /**\n   * @dev returns the asset price USD\n   * @param asset the address of the asset\n   * @return the price of the asset\n   **/\n  function getAssetPrice(address asset) external view returns (uint256);\n}"
			},
			"contracts/contracts/Dependencies/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.11;\n\n/**\n * Based on OpenZeppelin's Ownable contract:\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n *\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     *\n     * NOTE: This function is not safe, as it doesnâ€™t check owner is calling it.\n     * Make sure you check it before calling it.\n     */\n    function _renounceOwnership() internal {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n"
			},
			"contracts/contracts/Dependencies/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.11;\n\n/**\n * Based on OpenZeppelin's SafeMath:\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\n *\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/contracts/Dependencies/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "isOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"isOwner()": {
								"details": "Returns true if the caller is the current owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"isOwner()": "8f32d59b",
							"owner()": "8da5cb5b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Based on OpenZeppelin's Ownable contract: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/Dependencies/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/contracts/Dependencies/Ownable.sol\":{\"keccak256\":\"0x33ebd980403ab2462257b6b0352dd42d6d4ae86ce9de8c8fa7b8b5a84c585f1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c164606fdfd19624a7cf85fb8258b1866431a45a208489cd7158db0f132fc212\",\"dweb:/ipfs/QmYsmA6SdwwHSguo2SHDWP9wAxkvb1NPr7Yevw9vGhwCaV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 4,
								"contract": "contracts/contracts/Dependencies/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Based on OpenZeppelin's Ownable contract: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
						"version": 1
					}
				}
			},
			"contracts/contracts/Dependencies/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/contracts/Dependencies/SafeMath.sol\":760:5468  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/contracts/Dependencies/SafeMath.sol\":760:5468  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122064a894d2ec764c803e2eb8b9b9a1c11491c32aae4c5080668473e1cb45e71e2164736f6c634300060b0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122064a894d2ec764c803e2eb8b9b9a1c11491c32aae4c5080668473e1cb45e71e2164736f6c634300060b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0xA894D2EC76 0x4C DUP1 RETURNDATACOPY 0x2E 0xB8 0xB9 0xB9 LOG1 0xC1 EQ SWAP2 0xC3 0x2A 0xAE 0x4C POP DUP1 PUSH7 0x8473E1CB45E71E 0x21 PUSH5 0x736F6C6343 STOP MOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "760:4708:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122064a894d2ec764c803e2eb8b9b9a1c11491c32aae4c5080668473e1cb45e71e2164736f6c634300060b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0xA894D2EC76 0x4C DUP1 RETURNDATACOPY 0x2E 0xB8 0xB9 0xB9 LOG1 0xC1 EQ SWAP2 0xC3 0x2A 0xAE 0x4C POP DUP1 PUSH7 0x8473E1CB45E71E 0x21 PUSH5 0x736F6C6343 STOP MOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "760:4708:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 760,
									"end": 5468,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "INVALID",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 760,
									"end": 5468,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122064a894d2ec764c803e2eb8b9b9a1c11491c32aae4c5080668473e1cb45e71e2164736f6c634300060b0033",
									".code": [
										{
											"begin": 760,
											"end": 5468,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 760,
											"end": 5468,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 760,
											"end": 5468,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 760,
											"end": 5468,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 760,
											"end": 5468,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 760,
											"end": 5468,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 760,
											"end": 5468,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 760,
											"end": 5468,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 760,
											"end": 5468,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Based on OpenZeppelin's SafeMath: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/Dependencies/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/contracts/Dependencies/SafeMath.sol\":{\"keccak256\":\"0x666b890992a066cc791f36c2975cd595d9761a014c654c385ed36ffaf658f3fd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b261f6ac077c4ebc81dd3f4c833f866139acd8b908feff72385c32f83c21c2d\",\"dweb:/ipfs/Qmb91cmmBEFhwUWwVxgxTPmeNxzdiyCdxoVXB2gN3Gvg7e\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Based on OpenZeppelin's SafeMath: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol",
						"version": 1
					}
				}
			},
			"contracts/contracts/Interfaces/IPriceOracleGetter.sol": {
				"IPriceOracleGetter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "asset",
									"type": "address"
								}
							],
							"name": "getAssetPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getAssetPrice(address)": {
								"details": "returns the asset price USD",
								"params": {
									"asset": "the address of the asset"
								},
								"returns": {
									"_0": "the price of the asset*"
								}
							}
						},
						"title": "IPriceOracleGetter interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getAssetPrice(address)": "b3596f07"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAssetPrice(address)\":{\"details\":\"returns the asset price USD\",\"params\":{\"asset\":\"the address of the asset\"},\"returns\":{\"_0\":\"the price of the asset*\"}}},\"title\":\"IPriceOracleGetter interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface for the Meridian price oracle.*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/Interfaces/IPriceOracleGetter.sol\":\"IPriceOracleGetter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/contracts/Interfaces/IPriceOracleGetter.sol\":{\"keccak256\":\"0xf3f3c38249fd4cb7876f1504137e8d9f5fcb58939fd8a066f705a69ccd9faf8f\",\"license\":\"agpl-3.0\",\"urls\":[\"bzz-raw://f8048ddd04ce34baefd94e05fba049c17e34d947d4d425cf6a614a98a9632b98\",\"dweb:/ipfs/QmZs4Mw1ubnatKbGDeTdntYZzTFe4TNXVbhxLc6xw98PoG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Interface for the Meridian price oracle.*",
						"version": 1
					}
				}
			},
			"contracts/contracts/MeridianFallback.sol": {
				"MeridianFallbackOracle1": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sybil",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address[]",
									"name": "assets",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint128[]",
									"name": "prices",
									"type": "uint128[]"
								}
							],
							"name": "PricesSubmitted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sybil",
									"type": "address"
								}
							],
							"name": "SybilAuthorized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sybil",
									"type": "address"
								}
							],
							"name": "SybilUnauthorized",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "PERCENTAGE_BASE",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sybil",
									"type": "address"
								}
							],
							"name": "authorizeSybil",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "asset",
									"type": "address"
								}
							],
							"name": "getAssetPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sybil",
									"type": "address"
								}
							],
							"name": "isSybilWhitelisted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "assets",
									"type": "address[]"
								},
								{
									"internalType": "uint128[]",
									"name": "prices",
									"type": "uint128[]"
								}
							],
							"name": "submitPrices",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sybil",
									"type": "address"
								}
							],
							"name": "unauthorizeSybil",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getAssetPrice(address)": {
								"details": "returns the asset price USD",
								"params": {
									"asset": "the address of the asset"
								},
								"returns": {
									"_0": "the price of the asset*"
								}
							},
							"isOwner()": {
								"details": "Returns true if the caller is the current owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/contracts/MeridianFallback.sol\":260:1851  contract MeridianFallbackOracle1 is Ownable, IPriceOracleGetter {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/contracts/Dependencies/Ownable.sol\":838:844  _owner */\n  0x00\n    /* \"contracts/contracts/Dependencies/Ownable.sol\":838:857  _owner = msg.sender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"contracts/contracts/Dependencies/Ownable.sol\":847:857  msg.sender */\n  caller\n    /* \"contracts/contracts/Dependencies/Ownable.sol\":838:857  _owner = msg.sender */\n  swap1\n  dup2\n  or\n  dup3\n  sstore\n    /* \"contracts/contracts/Dependencies/Ownable.sol\":872:916  OwnershipTransferred(address(0), msg.sender) */\n  mload(0x40)\n    /* \"contracts/contracts/Dependencies/Ownable.sol\":847:857  msg.sender */\n  swap1\n  swap2\n    /* \"contracts/contracts/Dependencies/Ownable.sol\":838:844  _owner */\n  swap1\n    /* \"contracts/contracts/Dependencies/Ownable.sol\":872:916  OwnershipTransferred(address(0), msg.sender) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"contracts/contracts/Dependencies/Ownable.sol\":838:844  _owner */\n  dup3\n  swap1\n    /* \"contracts/contracts/Dependencies/Ownable.sol\":872:916  OwnershipTransferred(address(0), msg.sender) */\n  log3\n    /* \"contracts/contracts/MeridianFallback.sol\":260:1851  contract MeridianFallbackOracle1 is Ownable, IPriceOracleGetter {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/contracts/MeridianFallback.sol\":260:1851  contract MeridianFallbackOracle1 is Ownable, IPriceOracleGetter {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_11\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8f32d59b\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xb3596f07\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xf2be88cd\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_11:\n      dup1\n      0x0e5665e6\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x30d454f0\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5e91734c\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x87c13943\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/contracts/MeridianFallback.sol\":1105:1483  function submitPrices(address[] calldata assets, uint128[] calldata prices) external onlySybil {... */\n    tag_3:\n      tag_12\n      tag_13\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_13:\n      tag_15\n      jump\t// in\n    tag_12:\n      stop\n        /* \"contracts/contracts/MeridianFallback.sol\":1617:1719  function isSybilWhitelisted(address sybil) public view returns (bool) {... */\n    tag_4:\n      tag_16\n      tag_17\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_17:\n      tag_19\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/contracts/MeridianFallback.sol\":844:968  function authorizeSybil(address sybil) external onlyOwner {... */\n    tag_5:\n      tag_12\n      tag_23\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_23:\n      tag_24\n      jump\t// in\n        /* \"contracts/contracts/MeridianFallback.sol\":626:671  uint256 public constant PERCENTAGE_BASE = 1e4 */\n    tag_6:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":999:1076  function owner() public view returns (address) {... */\n    tag_7:\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1350:1440  function isOwner() public view returns (bool) {... */\n    tag_8:\n      tag_16\n      tag_34\n      jump\t// in\n        /* \"contracts/contracts/MeridianFallback.sol\":1487:1613  function getAssetPrice(address asset) external view override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_37\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_37:\n      tag_38\n      jump\t// in\n        /* \"contracts/contracts/MeridianFallback.sol\":972:1101  function unauthorizeSybil(address sybil) external onlyOwner {... */\n    tag_10:\n      tag_12\n      tag_41\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_41:\n      tag_42\n      jump\t// in\n        /* \"contracts/contracts/MeridianFallback.sol\":1105:1483  function submitPrices(address[] calldata assets, uint128[] calldata prices) external onlySybil {... */\n    tag_15:\n        /* \"contracts/contracts/MeridianFallback.sol\":792:828  _requireWhitelistedSybil(msg.sender) */\n      tag_44\n        /* \"contracts/contracts/MeridianFallback.sol\":817:827  msg.sender */\n      caller\n        /* \"contracts/contracts/MeridianFallback.sol\":792:816  _requireWhitelistedSybil */\n      tag_45\n        /* \"contracts/contracts/MeridianFallback.sol\":792:828  _requireWhitelistedSybil(msg.sender) */\n      jump\t// in\n    tag_44:\n        /* \"contracts/contracts/MeridianFallback.sol\":1214:1244  assets.length == prices.length */\n      dup3\n      dup2\n      eq\n        /* \"contracts/contracts/MeridianFallback.sol\":1206:1275  require(assets.length == prices.length, 'INCONSISTENT_PARAMS_LENGTH') */\n      tag_47\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_48\n      swap1\n      tag_49\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_47:\n        /* \"contracts/contracts/MeridianFallback.sol\":1286:1295  uint256 i */\n      0x00\n        /* \"contracts/contracts/MeridianFallback.sol\":1281:1424  for (uint256 i = 0; i < assets.length; i++) {... */\n    tag_50:\n        /* \"contracts/contracts/MeridianFallback.sol\":1301:1318  i < assets.length */\n      dup4\n      dup2\n      lt\n        /* \"contracts/contracts/MeridianFallback.sol\":1281:1424  for (uint256 i = 0; i < assets.length; i++) {... */\n      iszero\n      tag_51\n      jumpi\n        /* \"contracts/contracts/MeridianFallback.sol\":1354:1417  Price(uint64(block.number), uint64(block.timestamp), prices[i]) */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/contracts/MeridianFallback.sol\":1367:1379  block.number */\n      number\n        /* \"contracts/contracts/MeridianFallback.sol\":1354:1417  Price(uint64(block.number), uint64(block.timestamp), prices[i]) */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contracts/MeridianFallback.sol\":1389:1404  block.timestamp */\n      timestamp\n        /* \"contracts/contracts/MeridianFallback.sol\":1354:1417  Price(uint64(block.number), uint64(block.timestamp), prices[i]) */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contracts/MeridianFallback.sol\":1407:1413  prices */\n      dup5\n      dup5\n        /* \"contracts/contracts/MeridianFallback.sol\":1414:1415  i */\n      dup5\n        /* \"contracts/contracts/MeridianFallback.sol\":1407:1416  prices[i] */\n      dup2\n      dup2\n      lt\n      tag_53\n      jumpi\n      invalid\n    tag_53:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_54\n      swap2\n      swap1\n      tag_55\n      jump\t// in\n    tag_54:\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"contracts/contracts/MeridianFallback.sol\":1354:1417  Price(uint64(block.number), uint64(block.timestamp), prices[i]) */\n      and\n      swap1\n      mstore\n        /* \"contracts/contracts/MeridianFallback.sol\":1333:1340  _prices */\n      0x01\n        /* \"contracts/contracts/MeridianFallback.sol\":1333:1351  _prices[assets[i]] */\n      0x00\n        /* \"contracts/contracts/MeridianFallback.sol\":1341:1347  assets */\n      dup8\n      dup8\n        /* \"contracts/contracts/MeridianFallback.sol\":1348:1349  i */\n      dup6\n        /* \"contracts/contracts/MeridianFallback.sol\":1341:1350  assets[i] */\n      dup2\n      dup2\n      lt\n      tag_56\n      jumpi\n      invalid\n    tag_56:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_57\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_57:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/MeridianFallback.sol\":1333:1351  _prices[assets[i]] */\n      and\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x40\n      swap1\n      dup2\n      add\n      0x00\n      keccak256\n        /* \"contracts/contracts/MeridianFallback.sol\":1333:1417  _prices[assets[i]] = Price(uint64(block.number), uint64(block.timestamp), prices[i]) */\n      dup4\n      mload\n      dup2\n      sload\n      swap4\n      dup6\n      add\n      mload\n      swap5\n      swap1\n      swap3\n      add\n      mload\n      not(0xffffffffffffffff)\n      swap1\n      swap4\n      and\n      0xffffffffffffffff\n      swap3\n      dup4\n      and\n      or\n      not(0xffffffffffffffff0000000000000000)\n      and\n      0x010000000000000000\n      swap3\n      swap1\n      swap5\n      and\n      swap2\n      swap1\n      swap2\n      mul\n      swap3\n      swap1\n      swap3\n      or\n      sub(shl(0x80, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      shl(0x80, 0x01)\n      swap2\n      swap1\n      swap3\n      and\n      mul\n      or\n      swap1\n      sstore\n      0x01\n        /* \"contracts/contracts/MeridianFallback.sol\":1320:1323  i++ */\n      add\n        /* \"contracts/contracts/MeridianFallback.sol\":1281:1424  for (uint256 i = 0; i < assets.length; i++) {... */\n      jump(tag_50)\n    tag_51:\n      pop\n        /* \"contracts/contracts/MeridianFallback.sol\":1435:1478  PricesSubmitted(msg.sender, assets, prices) */\n      0x995dd01082df56f242aad7e0a6f87116e5d4c972ab8377309354fa2bd0de3e59\n        /* \"contracts/contracts/MeridianFallback.sol\":1451:1461  msg.sender */\n      caller\n        /* \"contracts/contracts/MeridianFallback.sol\":1463:1469  assets */\n      dup6\n      dup6\n        /* \"contracts/contracts/MeridianFallback.sol\":1471:1477  prices */\n      dup6\n      dup6\n        /* \"contracts/contracts/MeridianFallback.sol\":1435:1478  PricesSubmitted(msg.sender, assets, prices) */\n      mload(0x40)\n      tag_58\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/contracts/MeridianFallback.sol\":1105:1483  function submitPrices(address[] calldata assets, uint128[] calldata prices) external onlySybil {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/contracts/MeridianFallback.sol\":1617:1719  function isSybilWhitelisted(address sybil) public view returns (bool) {... */\n    tag_19:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/MeridianFallback.sol\":1700:1714  _sybils[sybil] */\n      and\n        /* \"contracts/contracts/MeridianFallback.sol\":1681:1685  bool */\n      0x00\n        /* \"contracts/contracts/MeridianFallback.sol\":1700:1714  _sybils[sybil] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/contracts/MeridianFallback.sol\":1700:1707  _sybils */\n      0x02\n        /* \"contracts/contracts/MeridianFallback.sol\":1700:1714  _sybils[sybil] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"contracts/contracts/MeridianFallback.sol\":1617:1719  function isSybilWhitelisted(address sybil) public view returns (bool) {... */\n      jump\t// out\n        /* \"contracts/contracts/MeridianFallback.sol\":844:968  function authorizeSybil(address sybil) external onlyOwner {... */\n    tag_24:\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1203:1212  isOwner() */\n      tag_62\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1203:1210  isOwner */\n      tag_34\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1203:1212  isOwner() */\n      jump\t// in\n    tag_62:\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1195:1249  require(isOwner(), \"Ownable: caller is not the owner\") */\n      tag_63\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_48\n      swap1\n      tag_65\n      jump\t// in\n    tag_63:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/MeridianFallback.sol\":908:922  _sybils[sybil] */\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/contracts/MeridianFallback.sol\":908:915  _sybils */\n      0x02\n        /* \"contracts/contracts/MeridianFallback.sol\":908:922  _sybils[sybil] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"contracts/contracts/MeridianFallback.sol\":908:929  _sybils[sybil] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/contracts/MeridianFallback.sol\":925:929  true */\n      0x01\n        /* \"contracts/contracts/MeridianFallback.sol\":908:929  _sybils[sybil] = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/contracts/MeridianFallback.sol\":941:963  SybilAuthorized(sybil) */\n      mload\n      0xe7d975a644451bd7331add56a59563e5d19b661497948c38d25b969487470673\n      swap2\n        /* \"contracts/contracts/MeridianFallback.sol\":908:922  _sybils[sybil] */\n      swap1\n        /* \"contracts/contracts/MeridianFallback.sol\":941:963  SybilAuthorized(sybil) */\n      log2\n        /* \"contracts/contracts/MeridianFallback.sol\":844:968  function authorizeSybil(address sybil) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/contracts/MeridianFallback.sol\":626:671  uint256 public constant PERCENTAGE_BASE = 1e4 */\n    tag_26:\n        /* \"contracts/contracts/MeridianFallback.sol\":668:671  1e4 */\n      0x2710\n        /* \"contracts/contracts/MeridianFallback.sol\":626:671  uint256 public constant PERCENTAGE_BASE = 1e4 */\n      dup2\n      jump\t// out\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":999:1076  function owner() public view returns (address) {... */\n    tag_30:\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1037:1044  address */\n      0x00\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1063:1069  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":999:1076  function owner() public view returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1350:1440  function isOwner() public view returns (bool) {... */\n    tag_34:\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1390:1394  bool */\n      0x00\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1427:1433  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1413:1423  msg.sender */\n      caller\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1413:1433  msg.sender == _owner */\n      eq\n      swap1\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1350:1440  function isOwner() public view returns (bool) {... */\n      jump\t// out\n        /* \"contracts/contracts/MeridianFallback.sol\":1487:1613  function getAssetPrice(address asset) external view override returns (uint256) {... */\n    tag_38:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/MeridianFallback.sol\":1587:1601  _prices[asset] */\n      and\n        /* \"contracts/contracts/MeridianFallback.sol\":1557:1564  uint256 */\n      0x00\n        /* \"contracts/contracts/MeridianFallback.sol\":1587:1601  _prices[asset] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/contracts/MeridianFallback.sol\":1587:1594  _prices */\n      0x01\n        /* \"contracts/contracts/MeridianFallback.sol\":1587:1601  _prices[asset] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/contracts/MeridianFallback.sol\":1587:1607  _prices[asset].price */\n      sload\n      shl(0x80, 0x01)\n      swap1\n      div\n      sub(shl(0x80, 0x01), 0x01)\n      and\n      swap1\n        /* \"contracts/contracts/MeridianFallback.sol\":1487:1613  function getAssetPrice(address asset) external view override returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/contracts/MeridianFallback.sol\":972:1101  function unauthorizeSybil(address sybil) external onlyOwner {... */\n    tag_42:\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1203:1212  isOwner() */\n      tag_71\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1203:1210  isOwner */\n      tag_34\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1203:1212  isOwner() */\n      jump\t// in\n    tag_71:\n        /* \"contracts/contracts/Dependencies/Ownable.sol\":1195:1249  require(isOwner(), \"Ownable: caller is not the owner\") */\n      tag_72\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_48\n      swap1\n      tag_65\n      jump\t// in\n    tag_72:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/MeridianFallback.sol\":1038:1052  _sybils[sybil] */\n      dup2\n      and\n        /* \"contracts/contracts/MeridianFallback.sol\":1055:1060  false */\n      0x00\n        /* \"contracts/contracts/MeridianFallback.sol\":1038:1052  _sybils[sybil] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/contracts/MeridianFallback.sol\":1038:1045  _sybils */\n      0x02\n        /* \"contracts/contracts/MeridianFallback.sol\":1038:1052  _sybils[sybil] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"contracts/contracts/MeridianFallback.sol\":1038:1060  _sybils[sybil] = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/contracts/MeridianFallback.sol\":1072:1096  SybilUnauthorized(sybil) */\n      mload\n      0x8bde64628aa5dae6d1c378a97b785745a4db9beaa7d503f91a8274c7b58d2f01\n      swap2\n        /* \"contracts/contracts/MeridianFallback.sol\":1055:1060  false */\n      swap1\n        /* \"contracts/contracts/MeridianFallback.sol\":1072:1096  SybilUnauthorized(sybil) */\n      log2\n        /* \"contracts/contracts/MeridianFallback.sol\":972:1101  function unauthorizeSybil(address sybil) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/contracts/MeridianFallback.sol\":1724:1849  function _requireWhitelistedSybil(address sybil) internal view {... */\n    tag_45:\n        /* \"contracts/contracts/MeridianFallback.sol\":1801:1826  isSybilWhitelisted(sybil) */\n      tag_76\n        /* \"contracts/contracts/MeridianFallback.sol\":1820:1825  sybil */\n      dup2\n        /* \"contracts/contracts/MeridianFallback.sol\":1801:1819  isSybilWhitelisted */\n      tag_19\n        /* \"contracts/contracts/MeridianFallback.sol\":1801:1826  isSybilWhitelisted(sybil) */\n      jump\t// in\n    tag_76:\n        /* \"contracts/contracts/MeridianFallback.sol\":1793:1844  require(isSybilWhitelisted(sybil), 'INVALID_SYBIL') */\n      tag_77\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_48\n      swap1\n      tag_79\n      jump\t// in\n    tag_77:\n        /* \"contracts/contracts/MeridianFallback.sol\":1724:1849  function _requireWhitelistedSybil(address sybil) internal view {... */\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":5:135   */\n    tag_81:\n        /* \"--CODEGEN--\":72:92   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":10111:10165   */\n      dup2\n      and\n        /* \"--CODEGEN--\":10694:10729   */\n      dup2\n      eq\n        /* \"--CODEGEN--\":10684:10686   */\n      tag_83\n      jumpi\n        /* \"--CODEGEN--\":10743:10744   */\n      0x00\n      dup1\n        /* \"--CODEGEN--\":10733:10745   */\n      revert\n        /* \"--CODEGEN--\":10684:10686   */\n    tag_83:\n        /* \"--CODEGEN--\":57:135   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":160:512   */\n    tag_84:\n      0x00\n      dup1\n        /* \"--CODEGEN--\":290:293   */\n      dup4\n        /* \"--CODEGEN--\":283:287   */\n      0x1f\n        /* \"--CODEGEN--\":275:281   */\n      dup5\n        /* \"--CODEGEN--\":271:288   */\n      add\n        /* \"--CODEGEN--\":267:294   */\n      slt\n        /* \"--CODEGEN--\":257:259   */\n      tag_86\n      jumpi\n      dup2\n      dup3\n        /* \"--CODEGEN--\":298:310   */\n      revert\n        /* \"--CODEGEN--\":257:259   */\n    tag_86:\n      pop\n        /* \"--CODEGEN--\":328:348   */\n      dup2\n      calldataload\n        /* \"--CODEGEN--\":368:386   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":357:387   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":354:356   */\n      iszero\n      tag_87\n      jumpi\n      dup2\n      dup3\n        /* \"--CODEGEN--\":390:402   */\n      revert\n        /* \"--CODEGEN--\":354:356   */\n    tag_87:\n        /* \"--CODEGEN--\":434:438   */\n      0x20\n        /* \"--CODEGEN--\":426:432   */\n      dup4\n        /* \"--CODEGEN--\":422:439   */\n      add\n        /* \"--CODEGEN--\":410:439   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":485:488   */\n      dup4\n        /* \"--CODEGEN--\":434:438   */\n      0x20\n      dup1\n        /* \"--CODEGEN--\":469:475   */\n      dup4\n        /* \"--CODEGEN--\":465:482   */\n      mul\n        /* \"--CODEGEN--\":426:432   */\n      dup6\n        /* \"--CODEGEN--\":451:483   */\n      add\n      add\n        /* \"--CODEGEN--\":448:489   */\n      gt\n        /* \"--CODEGEN--\":445:447   */\n      iszero\n      tag_88\n      jumpi\n        /* \"--CODEGEN--\":502:503   */\n      0x00\n      dup1\n        /* \"--CODEGEN--\":492:504   */\n      revert\n        /* \"--CODEGEN--\":445:447   */\n    tag_88:\n        /* \"--CODEGEN--\":250:512   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":1035:1276   */\n    tag_18:\n      0x00\n        /* \"--CODEGEN--\":1139:1141   */\n      0x20\n        /* \"--CODEGEN--\":1127:1136   */\n      dup3\n        /* \"--CODEGEN--\":1118:1125   */\n      dup5\n        /* \"--CODEGEN--\":1114:1137   */\n      sub\n        /* \"--CODEGEN--\":1110:1142   */\n      slt\n        /* \"--CODEGEN--\":1107:1109   */\n      iszero\n      tag_90\n      jumpi\n      dup1\n      dup2\n        /* \"--CODEGEN--\":1145:1157   */\n      revert\n        /* \"--CODEGEN--\":1107:1109   */\n    tag_90:\n        /* \"--CODEGEN--\":1207:1260   */\n      tag_91\n        /* \"--CODEGEN--\":1252:1259   */\n      dup4\n        /* \"--CODEGEN--\":1228:1250   */\n      dup4\n        /* \"--CODEGEN--\":1207:1260   */\n      tag_81\n      jump\t// in\n    tag_91:\n        /* \"--CODEGEN--\":1197:1260   */\n      swap4\n        /* \"--CODEGEN--\":1101:1276   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":1283:1961   */\n    tag_14:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"--CODEGEN--\":1474:1476   */\n      0x40\n        /* \"--CODEGEN--\":1462:1471   */\n      dup6\n        /* \"--CODEGEN--\":1453:1460   */\n      dup8\n        /* \"--CODEGEN--\":1449:1472   */\n      sub\n        /* \"--CODEGEN--\":1445:1477   */\n      slt\n        /* \"--CODEGEN--\":1442:1444   */\n      iszero\n      tag_93\n      jumpi\n      dup3\n      dup4\n        /* \"--CODEGEN--\":1480:1492   */\n      revert\n        /* \"--CODEGEN--\":1442:1444   */\n    tag_93:\n        /* \"--CODEGEN--\":1538:1555   */\n      dup5\n        /* \"--CODEGEN--\":1525:1556   */\n      calldataload\n        /* \"--CODEGEN--\":1576:1594   */\n      0xffffffffffffffff\n      dup1\n        /* \"--CODEGEN--\":1568:1574   */\n      dup3\n        /* \"--CODEGEN--\":1565:1595   */\n      gt\n        /* \"--CODEGEN--\":1562:1564   */\n      iszero\n      tag_94\n      jumpi\n      dup5\n      dup6\n        /* \"--CODEGEN--\":1598:1610   */\n      revert\n        /* \"--CODEGEN--\":1562:1564   */\n    tag_94:\n        /* \"--CODEGEN--\":1636:1716   */\n      tag_95\n        /* \"--CODEGEN--\":1708:1715   */\n      dup9\n        /* \"--CODEGEN--\":1699:1705   */\n      dup4\n        /* \"--CODEGEN--\":1688:1697   */\n      dup10\n        /* \"--CODEGEN--\":1684:1706   */\n      add\n        /* \"--CODEGEN--\":1636:1716   */\n      tag_84\n      jump\t// in\n    tag_95:\n        /* \"--CODEGEN--\":1618:1716   */\n      swap1\n      swap7\n      pop\n      swap5\n      pop\n        /* \"--CODEGEN--\":1781:1783   */\n      0x20\n        /* \"--CODEGEN--\":1766:1784   */\n      dup8\n      add\n        /* \"--CODEGEN--\":1753:1785   */\n      calldataload\n      swap2\n      pop\n        /* \"--CODEGEN--\":1794:1824   */\n      dup1\n      dup3\n      gt\n        /* \"--CODEGEN--\":1791:1793   */\n      iszero\n      tag_96\n      jumpi\n      dup4\n      dup5\n        /* \"--CODEGEN--\":1827:1839   */\n      revert\n        /* \"--CODEGEN--\":1791:1793   */\n    tag_96:\n      pop\n        /* \"--CODEGEN--\":1865:1945   */\n      tag_97\n        /* \"--CODEGEN--\":1937:1944   */\n      dup8\n        /* \"--CODEGEN--\":1928:1934   */\n      dup3\n        /* \"--CODEGEN--\":1917:1926   */\n      dup9\n        /* \"--CODEGEN--\":1913:1935   */\n      add\n        /* \"--CODEGEN--\":1865:1945   */\n      tag_84\n      jump\t// in\n    tag_97:\n        /* \"--CODEGEN--\":1436:1961   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n        /* \"--CODEGEN--\":1847:1945   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n        /* \"--CODEGEN--\":1436:1961   */\n      jump\t// out\n        /* \"--CODEGEN--\":1968:2209   */\n    tag_55:\n      0x00\n        /* \"--CODEGEN--\":2072:2074   */\n      0x20\n        /* \"--CODEGEN--\":2060:2069   */\n      dup3\n        /* \"--CODEGEN--\":2051:2058   */\n      dup5\n        /* \"--CODEGEN--\":2047:2070   */\n      sub\n        /* \"--CODEGEN--\":2043:2075   */\n      slt\n        /* \"--CODEGEN--\":2040:2042   */\n      iszero\n      tag_99\n      jumpi\n      dup1\n      dup2\n        /* \"--CODEGEN--\":2078:2090   */\n      revert\n        /* \"--CODEGEN--\":2040:2042   */\n    tag_99:\n        /* \"--CODEGEN--\":978:984   */\n      dup2\n        /* \"--CODEGEN--\":965:985   */\n      calldataload\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"--CODEGEN--\":10846:10851   */\n      dup2\n        /* \"--CODEGEN--\":9991:10037   */\n      and\n        /* \"--CODEGEN--\":10821:10826   */\n      dup2\n        /* \"--CODEGEN--\":10818:10853   */\n      eq\n        /* \"--CODEGEN--\":10808:10810   */\n      tag_91\n      jumpi\n      dup2\n      dup3\n        /* \"--CODEGEN--\":10857:10869   */\n      revert\n        /* \"--CODEGEN--\":2217:2390   */\n    tag_101:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":10111:10165   */\n      and\n        /* \"--CODEGEN--\":2790:2827   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":2379:2383   */\n      0x20\n        /* \"--CODEGEN--\":2370:2384   */\n      add\n      swap1\n        /* \"--CODEGEN--\":2297:2390   */\n      jump\t// out\n        /* \"--CODEGEN--\":5476:5579   */\n    tag_103:\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"--CODEGEN--\":9991:10037   */\n      and\n        /* \"--CODEGEN--\":5537:5574   */\n      swap1\n      mstore\n        /* \"--CODEGEN--\":5531:5579   */\n      jump\t// out\n        /* \"--CODEGEN--\":5706:5928   */\n    tag_32:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":10111:10165   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"--CODEGEN--\":2790:2827   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":5833:5835   */\n      0x20\n        /* \"--CODEGEN--\":5818:5836   */\n      add\n      swap1\n        /* \"--CODEGEN--\":5804:5928   */\n      jump\t// out\n        /* \"--CODEGEN--\":5935:6731   */\n    tag_59:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":10111:10165   */\n      dup7\n      and\n        /* \"--CODEGEN--\":2659:2717   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":6246:6248   */\n      0x60\n        /* \"--CODEGEN--\":6372:6374   */\n      0x20\n        /* \"--CODEGEN--\":6357:6375   */\n      dup1\n      dup4\n      add\n        /* \"--CODEGEN--\":6350:6398   */\n      dup3\n      swap1\n      mstore\n        /* \"--CODEGEN--\":5935:6731   */\n      0x00\n      swap2\n        /* \"--CODEGEN--\":6231:6249   */\n      dup4\n      add\n      swap1\n      dup2\n        /* \"--CODEGEN--\":3144:3230   */\n      tag_107\n        /* \"--CODEGEN--\":3223:3229   */\n      dup9\n        /* \"--CODEGEN--\":6231:6249   */\n      dup3\n        /* \"--CODEGEN--\":3144:3230   */\n      tag_28\n      jump\t// in\n    tag_107:\n        /* \"--CODEGEN--\":3137:3230   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":3315:3336   */\n      dup9\n      swap3\n      pop\n      dup4\n        /* \"--CODEGEN--\":3342:3633   */\n    tag_109:\n        /* \"--CODEGEN--\":3367:3373   */\n      dup9\n        /* \"--CODEGEN--\":3364:3365   */\n      dup2\n        /* \"--CODEGEN--\":3361:3374   */\n      lt\n        /* \"--CODEGEN--\":3342:3633   */\n      iszero\n      tag_111\n      jumpi\n        /* \"--CODEGEN--\":6372:6374   */\n      dup3\n        /* \"--CODEGEN--\":3463:3469   */\n      dup5\n        /* \"--CODEGEN--\":9584:9596   */\n      add\n        /* \"--CODEGEN--\":3484:3547   */\n      tag_112\n        /* \"--CODEGEN--\":3543:3546   */\n      dup4\n        /* \"--CODEGEN--\":9558:9597   */\n      tag_113\n        /* \"--CODEGEN--\":9584:9596   */\n      dup4\n        /* \"--CODEGEN--\":3463:3469   */\n      dup9\n        /* \"--CODEGEN--\":9558:9597   */\n      tag_81\n      jump\t// in\n    tag_113:\n        /* \"--CODEGEN--\":3484:3547   */\n      tag_101\n      jump\t// in\n    tag_112:\n        /* \"--CODEGEN--\":3554:3626   */\n      swap1\n      swap5\n      pop\n        /* \"--CODEGEN--\":3477:3547   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":3389:3390   */\n      0x01\n        /* \"--CODEGEN--\":3382:3391   */\n      add\n        /* \"--CODEGEN--\":3342:3633   */\n      jump(tag_109)\n    tag_111:\n      pop\n        /* \"--CODEGEN--\":6568:6588   */\n      dup5\n      dup2\n      sub\n        /* \"--CODEGEN--\":6563:6565   */\n      0x40\n        /* \"--CODEGEN--\":6548:6566   */\n      dup7\n      add\n        /* \"--CODEGEN--\":6541:6589   */\n      mstore\n        /* \"--CODEGEN--\":9056:9075   */\n      dup6\n      dup2\n      mstore\n        /* \"--CODEGEN--\":9096:9110   */\n      dup2\n      add\n      swap2\n      pop\n        /* \"--CODEGEN--\":4019:4040   */\n      dup6\n      dup4\n        /* \"--CODEGEN--\":4046:4337   */\n    tag_114:\n        /* \"--CODEGEN--\":4071:4077   */\n      dup7\n        /* \"--CODEGEN--\":4068:4069   */\n      dup2\n        /* \"--CODEGEN--\":4065:4078   */\n      lt\n        /* \"--CODEGEN--\":4046:4337   */\n      iszero\n      tag_116\n      jumpi\n        /* \"--CODEGEN--\":978:984   */\n      dup2\n        /* \"--CODEGEN--\":965:985   */\n      calldataload\n        /* \"--CODEGEN--\":990:1023   */\n      tag_117\n        /* \"--CODEGEN--\":1017:1022   */\n      dup2\n        /* \"--CODEGEN--\":990:1023   */\n      tag_118\n      jump\t// in\n    tag_117:\n        /* \"--CODEGEN--\":2486:2532   */\n      tag_119\n        /* \"--CODEGEN--\":2528:2531   */\n      dup6\n        /* \"--CODEGEN--\":2520:2526   */\n      dup3\n        /* \"--CODEGEN--\":2486:2532   */\n      tag_103\n      jump\t// in\n    tag_119:\n      pop\n        /* \"--CODEGEN--\":2552:2566   */\n      swap3\n      dup3\n      add\n      swap3\n        /* \"--CODEGEN--\":9712:9724   */\n      swap1\n      dup3\n      add\n      swap1\n        /* \"--CODEGEN--\":3389:3390   */\n      0x01\n        /* \"--CODEGEN--\":4086:4095   */\n      add\n        /* \"--CODEGEN--\":4046:4337   */\n      jump(tag_114)\n    tag_116:\n      pop\n        /* \"--CODEGEN--\":6595:6721   */\n      swap2\n      swap10\n        /* \"--CODEGEN--\":6217:6731   */\n      swap9\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":6738:6948   */\n    tag_21:\n        /* \"--CODEGEN--\":9903:9916   */\n      swap1\n      iszero\n        /* \"--CODEGEN--\":9896:9917   */\n      iszero\n        /* \"--CODEGEN--\":4432:4466   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":6859:6861   */\n      0x20\n        /* \"--CODEGEN--\":6844:6862   */\n      add\n      swap1\n        /* \"--CODEGEN--\":6830:6948   */\n      jump\t// out\n        /* \"--CODEGEN--\":6955:7371   */\n    tag_79:\n        /* \"--CODEGEN--\":7155:7157   */\n      0x20\n        /* \"--CODEGEN--\":7169:7216   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":4703:4705   */\n      0x0d\n        /* \"--CODEGEN--\":7140:7158   */\n      swap1\n      dup3\n      add\n        /* \"--CODEGEN--\":9056:9075   */\n      mstore\n      shl(0x9a, 0x1253959053125117d4d6509253)\n        /* \"--CODEGEN--\":9096:9110   */\n      0x40\n      dup3\n      add\n        /* \"--CODEGEN--\":4719:4755   */\n      mstore\n        /* \"--CODEGEN--\":4774:4786   */\n      0x60\n      add\n      swap1\n        /* \"--CODEGEN--\":7126:7371   */\n      jump\t// out\n        /* \"--CODEGEN--\":7378:7794   */\n    tag_65:\n        /* \"--CODEGEN--\":7578:7580   */\n      0x20\n        /* \"--CODEGEN--\":7592:7639   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":7563:7581   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":9056:9075   */\n      mstore\n        /* \"--CODEGEN--\":5061:5095   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"--CODEGEN--\":9096:9110   */\n      0x40\n      dup3\n      add\n        /* \"--CODEGEN--\":5041:5096   */\n      mstore\n        /* \"--CODEGEN--\":5115:5127   */\n      0x60\n      add\n      swap1\n        /* \"--CODEGEN--\":7549:7794   */\n      jump\t// out\n        /* \"--CODEGEN--\":7801:8217   */\n    tag_49:\n        /* \"--CODEGEN--\":8001:8003   */\n      0x20\n        /* \"--CODEGEN--\":8015:8062   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":5366:5368   */\n      0x1a\n        /* \"--CODEGEN--\":7986:8004   */\n      swap1\n      dup3\n      add\n        /* \"--CODEGEN--\":9056:9075   */\n      mstore\n        /* \"--CODEGEN--\":5402:5430   */\n      0x494e434f4e53495354454e545f504152414d535f4c454e475448000000000000\n        /* \"--CODEGEN--\":9096:9110   */\n      0x40\n      dup3\n      add\n        /* \"--CODEGEN--\":5382:5431   */\n      mstore\n        /* \"--CODEGEN--\":5450:5462   */\n      0x60\n      add\n      swap1\n        /* \"--CODEGEN--\":7972:8217   */\n      jump\t// out\n        /* \"--CODEGEN--\":8224:8446   */\n    tag_28:\n        /* \"--CODEGEN--\":5657:5694   */\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":8351:8353   */\n      0x20\n        /* \"--CODEGEN--\":8336:8354   */\n      add\n      swap1\n        /* \"--CODEGEN--\":8322:8446   */\n      jump\t// out\n        /* \"--CODEGEN--\":10759:10876   */\n    tag_118:\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"--CODEGEN--\":10846:10851   */\n      dup2\n        /* \"--CODEGEN--\":9991:10037   */\n      and\n        /* \"--CODEGEN--\":10821:10826   */\n      dup2\n        /* \"--CODEGEN--\":10818:10853   */\n      eq\n        /* \"--CODEGEN--\":10808:10810   */\n      tag_77\n      jumpi\n        /* \"--CODEGEN--\":10867:10868   */\n      0x00\n      dup1\n        /* \"--CODEGEN--\":10857:10869   */\n      revert\n\n    auxdata: 0xa264697066735822122050c966742be1396c11b9e28d29a27f1a473658e4574937770d87d3efe63c133164736f6c634300060b0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36107198061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f35780638f32d59b14610108578063b3596f0714610110578063f2be88cd1461012357610088565b80630e5665e61461008d57806330d454f0146100a25780635e91734c146100cb57806387c13943146100de575b600080fd5b6100a061009b3660046104bc565b610136565b005b6100b56100b036600461049a565b6102c0565b6040516100c29190610627565b60405180910390f35b6100a06100d936600461049a565b6102de565b6100e661034e565b6040516100c291906106c5565b6100fb610354565b6040516100c2919061056a565b6100b5610363565b6100e661011e36600461049a565b610374565b6100a061013136600461049a565b61039f565b61013f3361040c565b8281146101675760405162461bcd60e51b815260040161015e9061068e565b60405180910390fd5b60005b8381101561027a5760405180606001604052804367ffffffffffffffff1681526020014267ffffffffffffffff1681526020018484848181106101a957fe5b90506020020160208101906101be9190610525565b6001600160801b03169052600160008787858181106101d957fe5b90506020020160208101906101ee919061049a565b6001600160a01b0316815260208082019290925260409081016000208351815493850151949092015167ffffffffffffffff1990931667ffffffffffffffff928316176fffffffffffffffff00000000000000001916680100000000000000009290941691909102929092176001600160801b03908116600160801b919092160217905560010161016a565b507f995dd01082df56f242aad7e0a6f87116e5d4c972ab8377309354fa2bd0de3e5933858585856040516102b295949392919061057e565b60405180910390a150505050565b6001600160a01b031660009081526002602052604090205460ff1690565b6102e6610363565b6103025760405162461bcd60e51b815260040161015e90610659565b6001600160a01b038116600081815260026020526040808220805460ff19166001179055517fe7d975a644451bd7331add56a59563e5d19b661497948c38d25b9694874706739190a250565b61271081565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6001600160a01b0316600090815260016020526040902054600160801b90046001600160801b031690565b6103a7610363565b6103c35760405162461bcd60e51b815260040161015e90610659565b6001600160a01b038116600081815260026020526040808220805460ff19169055517f8bde64628aa5dae6d1c378a97b785745a4db9beaa7d503f91a8274c7b58d2f019190a250565b610415816102c0565b6104315760405162461bcd60e51b815260040161015e90610632565b50565b80356001600160a01b038116811461044b57600080fd5b92915050565b60008083601f840112610462578182fd5b50813567ffffffffffffffff811115610479578182fd5b602083019150836020808302850101111561049357600080fd5b9250929050565b6000602082840312156104ab578081fd5b6104b58383610434565b9392505050565b600080600080604085870312156104d1578283fd5b843567ffffffffffffffff808211156104e8578485fd5b6104f488838901610451565b9096509450602087013591508082111561050c578384fd5b5061051987828801610451565b95989497509550505050565b600060208284031215610536578081fd5b81356001600160801b03811681146104b5578182fd5b6001600160a01b0316815260200190565b6001600160801b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b038616815260606020808301829052600091830190816105a588826106c5565b9050889250835b888110156105d7578284016105ca836105c58388610434565b61054c565b90945091506001016105ac565b5084810360408601528581528101915085835b868110156106185781356105fd816106ce565b610607858261055d565b5092820192908201906001016105ea565b50919998505050505050505050565b901515815260200190565b6020808252600d908201526c1253959053125117d4d6509253609a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601a908201527f494e434f4e53495354454e545f504152414d535f4c454e475448000000000000604082015260600190565b90815260200190565b6001600160801b038116811461043157600080fdfea264697066735822122050c966742be1396c11b9e28d29a27f1a473658e4574937770d87d3efe63c133164736f6c634300060b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH2 0x719 DUP1 PUSH2 0x5F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0xB3596F07 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0xF2BE88CD EQ PUSH2 0x123 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0xE5665E6 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x30D454F0 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x5E91734C EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x87C13943 EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x4BC JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB5 PUSH2 0xB0 CALLDATASIZE PUSH1 0x4 PUSH2 0x49A JUMP JUMPDEST PUSH2 0x2C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x627 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA0 PUSH2 0xD9 CALLDATASIZE PUSH1 0x4 PUSH2 0x49A JUMP JUMPDEST PUSH2 0x2DE JUMP JUMPDEST PUSH2 0xE6 PUSH2 0x34E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0xFB PUSH2 0x354 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x56A JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x363 JUMP JUMPDEST PUSH2 0xE6 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x49A JUMP JUMPDEST PUSH2 0x374 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x49A JUMP JUMPDEST PUSH2 0x39F JUMP JUMPDEST PUSH2 0x13F CALLER PUSH2 0x40C JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x167 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15E SWAP1 PUSH2 0x68E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x27A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 NUMBER PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1A9 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0x525 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE PUSH1 0x1 PUSH1 0x0 DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x1D9 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0x49A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP4 DUP6 ADD MLOAD SWAP5 SWAP1 SWAP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 AND OR PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 NOT AND PUSH9 0x10000000000000000 SWAP3 SWAP1 SWAP5 AND SWAP2 SWAP1 SWAP2 MUL SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x80 SHL SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x16A JUMP JUMPDEST POP PUSH32 0x995DD01082DF56F242AAD7E0A6F87116E5D4C972AB8377309354FA2BD0DE3E59 CALLER DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x2B2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x57E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2E6 PUSH2 0x363 JUMP JUMPDEST PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15E SWAP1 PUSH2 0x659 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xE7D975A644451BD7331ADD56A59563E5D19B661497948C38D25B969487470673 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x3A7 PUSH2 0x363 JUMP JUMPDEST PUSH2 0x3C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15E SWAP1 PUSH2 0x659 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0x8BDE64628AA5DAE6D1C378A97B785745A4DB9BEAA7D503F91A8274C7B58D2F01 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x415 DUP2 PUSH2 0x2C0 JUMP JUMPDEST PUSH2 0x431 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15E SWAP1 PUSH2 0x632 JUMP JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x462 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x479 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4AB JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4B5 DUP4 DUP4 PUSH2 0x434 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4D1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4E8 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4F4 DUP9 DUP4 DUP10 ADD PUSH2 0x451 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x50C JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x519 DUP8 DUP3 DUP9 ADD PUSH2 0x451 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x536 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4B5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP4 ADD SWAP1 DUP2 PUSH2 0x5A5 DUP9 DUP3 PUSH2 0x6C5 JUMP JUMPDEST SWAP1 POP DUP9 SWAP3 POP DUP4 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x5D7 JUMPI DUP3 DUP5 ADD PUSH2 0x5CA DUP4 PUSH2 0x5C5 DUP4 DUP9 PUSH2 0x434 JUMP JUMPDEST PUSH2 0x54C JUMP JUMPDEST SWAP1 SWAP5 POP SWAP2 POP PUSH1 0x1 ADD PUSH2 0x5AC JUMP JUMPDEST POP DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE DUP6 DUP2 MSTORE DUP2 ADD SWAP2 POP DUP6 DUP4 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x618 JUMPI DUP2 CALLDATALOAD PUSH2 0x5FD DUP2 PUSH2 0x6CE JUMP JUMPDEST PUSH2 0x607 DUP6 DUP3 PUSH2 0x55D JUMP JUMPDEST POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5EA JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x1253959053125117D4D6509253 PUSH1 0x9A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x494E434F4E53495354454E545F504152414D535F4C454E475448000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x431 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP 0xC9 PUSH7 0x742BE1396C11B9 0xE2 DUP14 0x29 LOG2 PUSH32 0x1A473658E4574937770D87D3EFE63C133164736F6C634300060B003300000000 ",
							"sourceMap": "260:1591:3:-:0;;;;;;;;;;;;-1:-1:-1;838:6:0;:19;;-1:-1:-1;;;;;;838:19:0;847:10;838:19;;;;;872:44;;847:10;;838:6;872:44;;838:6;;872:44;260:1591:3;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f35780638f32d59b14610108578063b3596f0714610110578063f2be88cd1461012357610088565b80630e5665e61461008d57806330d454f0146100a25780635e91734c146100cb57806387c13943146100de575b600080fd5b6100a061009b3660046104bc565b610136565b005b6100b56100b036600461049a565b6102c0565b6040516100c29190610627565b60405180910390f35b6100a06100d936600461049a565b6102de565b6100e661034e565b6040516100c291906106c5565b6100fb610354565b6040516100c2919061056a565b6100b5610363565b6100e661011e36600461049a565b610374565b6100a061013136600461049a565b61039f565b61013f3361040c565b8281146101675760405162461bcd60e51b815260040161015e9061068e565b60405180910390fd5b60005b8381101561027a5760405180606001604052804367ffffffffffffffff1681526020014267ffffffffffffffff1681526020018484848181106101a957fe5b90506020020160208101906101be9190610525565b6001600160801b03169052600160008787858181106101d957fe5b90506020020160208101906101ee919061049a565b6001600160a01b0316815260208082019290925260409081016000208351815493850151949092015167ffffffffffffffff1990931667ffffffffffffffff928316176fffffffffffffffff00000000000000001916680100000000000000009290941691909102929092176001600160801b03908116600160801b919092160217905560010161016a565b507f995dd01082df56f242aad7e0a6f87116e5d4c972ab8377309354fa2bd0de3e5933858585856040516102b295949392919061057e565b60405180910390a150505050565b6001600160a01b031660009081526002602052604090205460ff1690565b6102e6610363565b6103025760405162461bcd60e51b815260040161015e90610659565b6001600160a01b038116600081815260026020526040808220805460ff19166001179055517fe7d975a644451bd7331add56a59563e5d19b661497948c38d25b9694874706739190a250565b61271081565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6001600160a01b0316600090815260016020526040902054600160801b90046001600160801b031690565b6103a7610363565b6103c35760405162461bcd60e51b815260040161015e90610659565b6001600160a01b038116600081815260026020526040808220805460ff19169055517f8bde64628aa5dae6d1c378a97b785745a4db9beaa7d503f91a8274c7b58d2f019190a250565b610415816102c0565b6104315760405162461bcd60e51b815260040161015e90610632565b50565b80356001600160a01b038116811461044b57600080fd5b92915050565b60008083601f840112610462578182fd5b50813567ffffffffffffffff811115610479578182fd5b602083019150836020808302850101111561049357600080fd5b9250929050565b6000602082840312156104ab578081fd5b6104b58383610434565b9392505050565b600080600080604085870312156104d1578283fd5b843567ffffffffffffffff808211156104e8578485fd5b6104f488838901610451565b9096509450602087013591508082111561050c578384fd5b5061051987828801610451565b95989497509550505050565b600060208284031215610536578081fd5b81356001600160801b03811681146104b5578182fd5b6001600160a01b0316815260200190565b6001600160801b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b038616815260606020808301829052600091830190816105a588826106c5565b9050889250835b888110156105d7578284016105ca836105c58388610434565b61054c565b90945091506001016105ac565b5084810360408601528581528101915085835b868110156106185781356105fd816106ce565b610607858261055d565b5092820192908201906001016105ea565b50919998505050505050505050565b901515815260200190565b6020808252600d908201526c1253959053125117d4d6509253609a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601a908201527f494e434f4e53495354454e545f504152414d535f4c454e475448000000000000604082015260600190565b90815260200190565b6001600160801b038116811461043157600080fdfea264697066735822122050c966742be1396c11b9e28d29a27f1a473658e4574937770d87d3efe63c133164736f6c634300060b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0xB3596F07 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0xF2BE88CD EQ PUSH2 0x123 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0xE5665E6 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x30D454F0 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x5E91734C EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x87C13943 EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x4BC JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB5 PUSH2 0xB0 CALLDATASIZE PUSH1 0x4 PUSH2 0x49A JUMP JUMPDEST PUSH2 0x2C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x627 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA0 PUSH2 0xD9 CALLDATASIZE PUSH1 0x4 PUSH2 0x49A JUMP JUMPDEST PUSH2 0x2DE JUMP JUMPDEST PUSH2 0xE6 PUSH2 0x34E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0xFB PUSH2 0x354 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x56A JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x363 JUMP JUMPDEST PUSH2 0xE6 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x49A JUMP JUMPDEST PUSH2 0x374 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x49A JUMP JUMPDEST PUSH2 0x39F JUMP JUMPDEST PUSH2 0x13F CALLER PUSH2 0x40C JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x167 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15E SWAP1 PUSH2 0x68E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x27A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 NUMBER PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1A9 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0x525 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE PUSH1 0x1 PUSH1 0x0 DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x1D9 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0x49A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP4 DUP6 ADD MLOAD SWAP5 SWAP1 SWAP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 AND OR PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 NOT AND PUSH9 0x10000000000000000 SWAP3 SWAP1 SWAP5 AND SWAP2 SWAP1 SWAP2 MUL SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x80 SHL SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x16A JUMP JUMPDEST POP PUSH32 0x995DD01082DF56F242AAD7E0A6F87116E5D4C972AB8377309354FA2BD0DE3E59 CALLER DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x2B2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x57E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2E6 PUSH2 0x363 JUMP JUMPDEST PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15E SWAP1 PUSH2 0x659 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xE7D975A644451BD7331ADD56A59563E5D19B661497948C38D25B969487470673 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x3A7 PUSH2 0x363 JUMP JUMPDEST PUSH2 0x3C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15E SWAP1 PUSH2 0x659 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0x8BDE64628AA5DAE6D1C378A97B785745A4DB9BEAA7D503F91A8274C7B58D2F01 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x415 DUP2 PUSH2 0x2C0 JUMP JUMPDEST PUSH2 0x431 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15E SWAP1 PUSH2 0x632 JUMP JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x462 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x479 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4AB JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4B5 DUP4 DUP4 PUSH2 0x434 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4D1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4E8 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4F4 DUP9 DUP4 DUP10 ADD PUSH2 0x451 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x50C JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x519 DUP8 DUP3 DUP9 ADD PUSH2 0x451 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x536 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4B5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP4 ADD SWAP1 DUP2 PUSH2 0x5A5 DUP9 DUP3 PUSH2 0x6C5 JUMP JUMPDEST SWAP1 POP DUP9 SWAP3 POP DUP4 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x5D7 JUMPI DUP3 DUP5 ADD PUSH2 0x5CA DUP4 PUSH2 0x5C5 DUP4 DUP9 PUSH2 0x434 JUMP JUMPDEST PUSH2 0x54C JUMP JUMPDEST SWAP1 SWAP5 POP SWAP2 POP PUSH1 0x1 ADD PUSH2 0x5AC JUMP JUMPDEST POP DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE DUP6 DUP2 MSTORE DUP2 ADD SWAP2 POP DUP6 DUP4 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x618 JUMPI DUP2 CALLDATALOAD PUSH2 0x5FD DUP2 PUSH2 0x6CE JUMP JUMPDEST PUSH2 0x607 DUP6 DUP3 PUSH2 0x55D JUMP JUMPDEST POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5EA JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x1253959053125117D4D6509253 PUSH1 0x9A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x494E434F4E53495354454E545F504152414D535F4C454E475448000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x431 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP 0xC9 PUSH7 0x742BE1396C11B9 0xE2 DUP14 0x29 LOG2 PUSH32 0x1A473658E4574937770D87D3EFE63C133164736F6C634300060B003300000000 ",
							"sourceMap": "260:1591:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1105:378;;;;;;:::i;:::-;;:::i;:::-;;1617:102;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;844:124;;;;;;:::i;:::-;;:::i;626:45::-;;;:::i;:::-;;;;;;;:::i;999:77:0:-;;;:::i;:::-;;;;;;;:::i;1350:90::-;;;:::i;1487:126:3:-;;;;;;:::i;:::-;;:::i;972:129::-;;;;;;:::i;:::-;;:::i;1105:378::-;792:36;817:10;792:24;:36::i;:::-;1214:30;;::::1;1206:69;;;;-1:-1:-1::0;;;1206:69:3::1;;;;;;;:::i;:::-;;;;;;;;;1286:9;1281:143;1301:17:::0;;::::1;1281:143;;;1354:63;;;;;;;;1367:12;1354:63;;;;;;1389:15;1354:63;;;;;;1407:6;;1414:1;1407:9;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;1354:63:3::1;::::0;;1333:7:::1;:18;1341:6:::0;;1348:1;1341:9;;::::1;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;1333:18:3::1;::::0;;::::1;::::0;;::::1;::::0;;;;;;;;-1:-1:-1;1333:18:3;:84;;;;;;::::1;::::0;;;;::::1;::::0;-1:-1:-1;;1333:84:3;;::::1;;::::0;;::::1;;-1:-1:-1::0;;1333:84:3::1;::::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;-1:-1:-1::0;;;;;1333:84:3;;::::1;-1:-1:-1::0;;;1333:84:3;;;::::1;;;::::0;;-1:-1:-1;1320:3:3::1;1281:143;;;;1435:43;1451:10;1463:6;;1471;;1435:43;;;;;;;;;;:::i;:::-;;;;;;;;1105:378:::0;;;;:::o;1617:102::-;-1:-1:-1;;;;;1700:14:3;1681:4;1700:14;;;:7;:14;;;;;;;;;1617:102::o;844:124::-;1203:9:0;:7;:9::i;:::-;1195:54;;;;-1:-1:-1;;;1195:54:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;908:14:3;::::1;;::::0;;;:7:::1;:14;::::0;;;;;:21;;-1:-1:-1;;908:21:3::1;925:4;908:21;::::0;;941:22;::::1;::::0;908:14;941:22:::1;844:124:::0;:::o;626:45::-;668:3;626:45;:::o;999:77:0:-;1037:7;1063:6;-1:-1:-1;;;;;1063:6:0;999:77;:::o;1350:90::-;1390:4;1427:6;-1:-1:-1;;;;;1427:6:0;1413:10;:20;;1350:90::o;1487:126:3:-;-1:-1:-1;;;;;1587:14:3;1557:7;1587:14;;;:7;:14;;;;;:20;-1:-1:-1;;;1587:20:3;;-1:-1:-1;;;;;1587:20:3;;1487:126::o;972:129::-;1203:9:0;:7;:9::i;:::-;1195:54;;;;-1:-1:-1;;;1195:54:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;1038:14:3;::::1;1055:5;1038:14:::0;;;:7:::1;:14;::::0;;;;;:22;;-1:-1:-1;;1038:22:3::1;::::0;;1072:24;::::1;::::0;1055:5;1072:24:::1;972:129:::0;:::o;1724:125::-;1801:25;1820:5;1801:18;:25::i;:::-;1793:51;;;;-1:-1:-1;;;1793:51:3;;;;;;;:::i;:::-;1724:125;:::o;5:130:-1:-;72:20;;-1:-1;;;;;10111:54;;10694:35;;10684:2;;10743:1;;10733:12;10684:2;57:78;;;;:::o;160:352::-;;;290:3;283:4;275:6;271:17;267:27;257:2;;-1:-1;;298:12;257:2;-1:-1;328:20;;368:18;357:30;;354:2;;;-1:-1;;390:12;354:2;434:4;426:6;422:17;410:29;;485:3;434:4;;469:6;465:17;426:6;451:32;;448:41;445:2;;;502:1;;492:12;445:2;250:262;;;;;:::o;1035:241::-;;1139:2;1127:9;1118:7;1114:23;1110:32;1107:2;;;-1:-1;;1145:12;1107:2;1207:53;1252:7;1228:22;1207:53;:::i;:::-;1197:63;1101:175;-1:-1;;;1101:175::o;1283:678::-;;;;;1474:2;1462:9;1453:7;1449:23;1445:32;1442:2;;;-1:-1;;1480:12;1442:2;1538:17;1525:31;1576:18;;1568:6;1565:30;1562:2;;;-1:-1;;1598:12;1562:2;1636:80;1708:7;1699:6;1688:9;1684:22;1636:80;:::i;:::-;1618:98;;-1:-1;1618:98;-1:-1;1781:2;1766:18;;1753:32;;-1:-1;1794:30;;;1791:2;;;-1:-1;;1827:12;1791:2;;1865:80;1937:7;1928:6;1917:9;1913:22;1865:80;:::i;:::-;1436:525;;;;-1:-1;1847:98;-1:-1;;;;1436:525::o;1968:241::-;;2072:2;2060:9;2051:7;2047:23;2043:32;2040:2;;;-1:-1;;2078:12;2040:2;978:6;965:20;-1:-1;;;;;10846:5;9991:46;10821:5;10818:35;10808:2;;-1:-1;;10857:12;2217:173;-1:-1;;;;;10111:54;2790:37;;2379:4;2370:14;;2297:93::o;5476:103::-;-1:-1;;;;;9991:46;5537:37;;5531:48::o;5706:222::-;-1:-1;;;;;10111:54;;;;2790:37;;5833:2;5818:18;;5804:124::o;5935:796::-;-1:-1;;;;;10111:54;;2659:58;;6246:2;6372;6357:18;;;6350:48;;;5935:796;;6231:18;;;;3144:86;3223:6;6231:18;3144:86;:::i;:::-;3137:93;;3315:21;;;-1:-1;3342:291;3367:6;3364:1;3361:13;3342:291;;;6372:2;3463:6;9584:12;3484:63;3543:3;9558:39;9584:12;3463:6;9558:39;:::i;:::-;3484:63;:::i;:::-;3554:72;;-1:-1;3477:70;-1:-1;3389:1;3382:9;3342:291;;;-1:-1;6568:20;;;6563:2;6548:18;;6541:48;9056:19;;;9096:14;;;-1:-1;4019:21;-1:-1;4046:291;4071:6;4068:1;4065:13;4046:291;;;978:6;965:20;990:33;1017:5;990:33;:::i;:::-;2486:46;2528:3;2520:6;2486:46;:::i;:::-;-1:-1;2552:14;;;;9712:12;;;;3389:1;4086:9;4046:291;;;-1:-1;6595:126;;6217:514;-1:-1;;;;;;;;;6217:514::o;6738:210::-;9903:13;;9896:21;4432:34;;6859:2;6844:18;;6830:118::o;6955:416::-;7155:2;7169:47;;;4703:2;7140:18;;;9056:19;-1:-1;;;9096:14;;;4719:36;4774:12;;;7126:245::o;7378:416::-;7578:2;7592:47;;;7563:18;;;9056:19;5061:34;9096:14;;;5041:55;5115:12;;;7549:245::o;7801:416::-;8001:2;8015:47;;;5366:2;7986:18;;;9056:19;5402:28;9096:14;;;5382:49;5450:12;;;7972:245::o;8224:222::-;5657:37;;;8351:2;8336:18;;8322:124::o;10759:117::-;-1:-1;;;;;10846:5;9991:46;10821:5;10818:35;10808:2;;10867:1;;10857:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "363400",
								"executionCost": "22767",
								"totalCost": "386167"
							},
							"external": {
								"PERCENTAGE_BASE()": "295",
								"authorizeSybil(address)": "23272",
								"getAssetPrice(address)": "1354",
								"isOwner()": "1079",
								"isSybilWhitelisted(address)": "1310",
								"owner()": "1070",
								"submitPrices(address[],uint128[])": "infinite",
								"unauthorizeSybil(address)": "23287"
							},
							"internal": {
								"_requireWhitelistedSybil(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 260,
									"end": 1851,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 838,
									"end": 844,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 838,
									"end": 857,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 838,
									"end": 857,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 838,
									"end": 857,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 847,
									"end": 857,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 838,
									"end": 857,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 838,
									"end": 857,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 838,
									"end": 857,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 838,
									"end": 857,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 838,
									"end": 857,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 872,
									"end": 916,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 872,
									"end": 916,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 847,
									"end": 857,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 847,
									"end": 857,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 838,
									"end": 844,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 872,
									"end": 916,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 872,
									"end": 916,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 838,
									"end": 844,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 838,
									"end": 844,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 872,
									"end": 916,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 260,
									"end": 1851,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122050c966742be1396c11b9e28d29a27f1a473658e4574937770d87d3efe63c133164736f6c634300060b0033",
									".code": [
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "8DA5CB5B"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "8DA5CB5B"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "8F32D59B"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "B3596F07"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "F2BE88CD"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "E5665E6"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "30D454F0"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "5E91734C"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "87C13943"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 260,
											"end": 1851,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "tag",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 844,
											"end": 968,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 844,
											"end": 968,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 844,
											"end": 968,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 844,
											"end": 968,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 844,
											"end": 968,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 844,
											"end": 968,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 844,
											"end": 968,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 844,
											"end": 968,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 844,
											"end": 968,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 844,
											"end": 968,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 844,
											"end": 968,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 844,
											"end": 968,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 626,
											"end": 671,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 626,
											"end": 671,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 626,
											"end": 671,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 626,
											"end": 671,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 626,
											"end": 671,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1350,
											"end": 1440,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1350,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1350,
											"end": 1440,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1350,
											"end": 1440,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1350,
											"end": 1440,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "tag",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "tag",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 792,
											"end": 828,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 817,
											"end": 827,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 792,
											"end": 816,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 792,
											"end": 828,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 792,
											"end": 828,
											"name": "tag",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 792,
											"end": 828,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1214,
											"end": 1244,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1214,
											"end": 1244,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1214,
											"end": 1244,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1206,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1286,
											"end": 1295,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1281,
											"end": 1424,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1281,
											"end": 1424,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1301,
											"end": 1318,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1301,
											"end": 1318,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1301,
											"end": 1318,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1281,
											"end": 1424,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1281,
											"end": 1424,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 1281,
											"end": 1424,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1367,
											"end": 1379,
											"name": "NUMBER",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1389,
											"end": 1404,
											"name": "TIMESTAMP",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1413,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1413,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1414,
											"end": 1415,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "INVALID",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "tag",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1407,
											"end": 1416,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1417,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1340,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1341,
											"end": 1347,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1347,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1348,
											"end": 1349,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "INVALID",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "tag",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "tag",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 1341,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1333,
											"end": 1351,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "OR",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF0000000000000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "PUSH",
											"source": 3,
											"value": "10000000000000000"
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "OR",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1333,
											"end": 1417,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 1320,
											"end": 1323,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1281,
											"end": 1424,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1281,
											"end": 1424,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1281,
											"end": 1424,
											"name": "tag",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 1281,
											"end": 1424,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1281,
											"end": 1424,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "PUSH",
											"source": 3,
											"value": "995DD01082DF56F242AAD7E0A6F87116E5D4C972AB8377309354FA2BD0DE3E59"
										},
										{
											"begin": 1451,
											"end": 1461,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1463,
											"end": 1469,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1463,
											"end": 1469,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1471,
											"end": 1477,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1471,
											"end": 1477,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "LOG1",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1483,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1681,
											"end": 1685,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1700,
											"end": 1707,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1700,
											"end": 1714,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1617,
											"end": 1719,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 844,
											"end": 968,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 844,
											"end": 968,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1203,
											"end": 1212,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1203,
											"end": 1210,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1203,
											"end": 1212,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1203,
											"end": 1212,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1203,
											"end": 1212,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 908,
											"end": 922,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 908,
											"end": 922,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 908,
											"end": 922,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 908,
											"end": 922,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 908,
											"end": 922,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 908,
											"end": 922,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 908,
											"end": 915,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 908,
											"end": 922,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 908,
											"end": 922,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 908,
											"end": 922,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 908,
											"end": 922,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 908,
											"end": 922,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 908,
											"end": 922,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 908,
											"end": 929,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 908,
											"end": 929,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 908,
											"end": 929,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 925,
											"end": 929,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 908,
											"end": 929,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 908,
											"end": 929,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 908,
											"end": 929,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 941,
											"end": 963,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 941,
											"end": 963,
											"name": "PUSH",
											"source": 3,
											"value": "E7D975A644451BD7331ADD56A59563E5D19B661497948C38D25B969487470673"
										},
										{
											"begin": 941,
											"end": 963,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 908,
											"end": 922,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 941,
											"end": 963,
											"name": "LOG2",
											"source": 3
										},
										{
											"begin": 844,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 844,
											"end": 968,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "tag",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 668,
											"end": 671,
											"name": "PUSH",
											"source": 3,
											"value": "2710"
										},
										{
											"begin": 626,
											"end": 671,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 626,
											"end": 671,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1037,
											"end": 1044,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1063,
											"end": 1069,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1063,
											"end": 1069,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1076,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1350,
											"end": 1440,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1350,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1390,
											"end": 1394,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1427,
											"end": 1433,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1427,
											"end": 1433,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1413,
											"end": 1423,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 1413,
											"end": 1433,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1413,
											"end": 1433,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1350,
											"end": 1440,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1587,
											"end": 1601,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1557,
											"end": 1564,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1587,
											"end": 1601,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1587,
											"end": 1601,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1587,
											"end": 1601,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1587,
											"end": 1594,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1587,
											"end": 1601,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1587,
											"end": 1601,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1587,
											"end": 1601,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1587,
											"end": 1601,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1587,
											"end": 1601,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1587,
											"end": 1607,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1587,
											"end": 1607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1587,
											"end": 1607,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1587,
											"end": 1607,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1587,
											"end": 1607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1487,
											"end": 1613,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1203,
											"end": 1212,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1203,
											"end": 1210,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1203,
											"end": 1212,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1203,
											"end": 1212,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1203,
											"end": 1212,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1195,
											"end": 1249,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1055,
											"end": 1060,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1045,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1052,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 1072,
											"end": 1096,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1072,
											"end": 1096,
											"name": "PUSH",
											"source": 3,
											"value": "8BDE64628AA5DAE6D1C378A97B785745A4DB9BEAA7D503F91A8274C7B58D2F01"
										},
										{
											"begin": 1072,
											"end": 1096,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1055,
											"end": 1060,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1072,
											"end": 1096,
											"name": "LOG2",
											"source": 3
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 972,
											"end": 1101,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1724,
											"end": 1849,
											"name": "tag",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 1724,
											"end": 1849,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1801,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 1820,
											"end": 1825,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1801,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 1801,
											"end": 1826,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1801,
											"end": 1826,
											"name": "tag",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 1801,
											"end": 1826,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "tag",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 1793,
											"end": 1844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1724,
											"end": 1849,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1724,
											"end": 1849,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 5,
											"end": 135,
											"name": "tag",
											"source": -1,
											"value": "81"
										},
										{
											"begin": 5,
											"end": 135,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 72,
											"end": 92,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 72,
											"end": 92,
											"name": "CALLDATALOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10111,
											"end": 10165,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 10111,
											"end": 10165,
											"name": "AND",
											"source": -1
										},
										{
											"begin": 10694,
											"end": 10729,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 10694,
											"end": 10729,
											"name": "EQ",
											"source": -1
										},
										{
											"begin": 10684,
											"end": 10686,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "83"
										},
										{
											"begin": 10684,
											"end": 10686,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 10743,
											"end": 10744,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 10743,
											"end": 10744,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 10733,
											"end": 10745,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 10684,
											"end": 10686,
											"name": "tag",
											"source": -1,
											"value": "83"
										},
										{
											"begin": 10684,
											"end": 10686,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 57,
											"end": 135,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 57,
											"end": 135,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": 57,
											"end": 135,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 57,
											"end": 135,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 57,
											"end": 135,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 160,
											"end": 512,
											"name": "tag",
											"source": -1,
											"value": "84"
										},
										{
											"begin": 160,
											"end": 512,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 160,
											"end": 512,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 160,
											"end": 512,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 290,
											"end": 293,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 283,
											"end": 287,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": 275,
											"end": 281,
											"name": "DUP5",
											"source": -1
										},
										{
											"begin": 271,
											"end": 288,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 267,
											"end": 294,
											"name": "SLT",
											"source": -1
										},
										{
											"begin": 257,
											"end": 259,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "86"
										},
										{
											"begin": 257,
											"end": 259,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 298,
											"end": 310,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 257,
											"end": 259,
											"name": "tag",
											"source": -1,
											"value": "86"
										},
										{
											"begin": 257,
											"end": 259,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 328,
											"end": 348,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 328,
											"end": 348,
											"name": "CALLDATALOAD",
											"source": -1
										},
										{
											"begin": 368,
											"end": 386,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 357,
											"end": 387,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 357,
											"end": 387,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 354,
											"end": 356,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 354,
											"end": 356,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "87"
										},
										{
											"begin": 354,
											"end": 356,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 390,
											"end": 402,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 354,
											"end": 356,
											"name": "tag",
											"source": -1,
											"value": "87"
										},
										{
											"begin": 354,
											"end": 356,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 434,
											"end": 438,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 426,
											"end": 432,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 422,
											"end": 439,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 410,
											"end": 439,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": 410,
											"end": 439,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 485,
											"end": 488,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 434,
											"end": 438,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 434,
											"end": 438,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 465,
											"end": 482,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 426,
											"end": 432,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": 451,
											"end": 483,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 451,
											"end": 483,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 448,
											"end": 489,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 445,
											"end": 447,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 445,
											"end": 447,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "88"
										},
										{
											"begin": 445,
											"end": 447,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 502,
											"end": 503,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 502,
											"end": 503,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 492,
											"end": 504,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 445,
											"end": 447,
											"name": "tag",
											"source": -1,
											"value": "88"
										},
										{
											"begin": 445,
											"end": 447,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 250,
											"end": 512,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 250,
											"end": 512,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 250,
											"end": 512,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 250,
											"end": 512,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 250,
											"end": 512,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 250,
											"end": 512,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 1035,
											"end": 1276,
											"name": "tag",
											"source": -1,
											"value": "18"
										},
										{
											"begin": 1035,
											"end": 1276,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1035,
											"end": 1276,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1139,
											"end": 1141,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 1127,
											"end": 1136,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 1118,
											"end": 1125,
											"name": "DUP5",
											"source": -1
										},
										{
											"begin": 1114,
											"end": 1137,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1110,
											"end": 1142,
											"name": "SLT",
											"source": -1
										},
										{
											"begin": 1107,
											"end": 1109,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 1107,
											"end": 1109,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "90"
										},
										{
											"begin": 1107,
											"end": 1109,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 1145,
											"end": 1157,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 1107,
											"end": 1109,
											"name": "tag",
											"source": -1,
											"value": "90"
										},
										{
											"begin": 1107,
											"end": 1109,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1207,
											"end": 1260,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "91"
										},
										{
											"begin": 1252,
											"end": 1259,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 1228,
											"end": 1250,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 1207,
											"end": 1260,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "81"
										},
										{
											"begin": 1207,
											"end": 1260,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": 1207,
											"end": 1260,
											"name": "tag",
											"source": -1,
											"value": "91"
										},
										{
											"begin": 1207,
											"end": 1260,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1197,
											"end": 1260,
											"name": "SWAP4",
											"source": -1
										},
										{
											"begin": 1101,
											"end": 1276,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1101,
											"end": 1276,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 1283,
											"end": 1961,
											"name": "tag",
											"source": -1,
											"value": "14"
										},
										{
											"begin": 1283,
											"end": 1961,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1283,
											"end": 1961,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1283,
											"end": 1961,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 1283,
											"end": 1961,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1283,
											"end": 1961,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 1474,
											"end": 1476,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": 1462,
											"end": 1471,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": 1453,
											"end": 1460,
											"name": "DUP8",
											"source": -1
										},
										{
											"begin": 1449,
											"end": 1472,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1445,
											"end": 1477,
											"name": "SLT",
											"source": -1
										},
										{
											"begin": 1442,
											"end": 1444,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 1442,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "93"
										},
										{
											"begin": 1442,
											"end": 1444,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1492,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 1442,
											"end": 1444,
											"name": "tag",
											"source": -1,
											"value": "93"
										},
										{
											"begin": 1442,
											"end": 1444,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1538,
											"end": 1555,
											"name": "DUP5",
											"source": -1
										},
										{
											"begin": 1525,
											"end": 1556,
											"name": "CALLDATALOAD",
											"source": -1
										},
										{
											"begin": 1576,
											"end": 1594,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1576,
											"end": 1594,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 1568,
											"end": 1574,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 1565,
											"end": 1595,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 1562,
											"end": 1564,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 1562,
											"end": 1564,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "94"
										},
										{
											"begin": 1562,
											"end": 1564,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP5",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": 1598,
											"end": 1610,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 1562,
											"end": 1564,
											"name": "tag",
											"source": -1,
											"value": "94"
										},
										{
											"begin": 1562,
											"end": 1564,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1636,
											"end": 1716,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "95"
										},
										{
											"begin": 1708,
											"end": 1715,
											"name": "DUP9",
											"source": -1
										},
										{
											"begin": 1699,
											"end": 1705,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 1688,
											"end": 1697,
											"name": "DUP10",
											"source": -1
										},
										{
											"begin": 1684,
											"end": 1706,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 1636,
											"end": 1716,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "84"
										},
										{
											"begin": 1636,
											"end": 1716,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": 1636,
											"end": 1716,
											"name": "tag",
											"source": -1,
											"value": "95"
										},
										{
											"begin": 1636,
											"end": 1716,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1618,
											"end": 1716,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 1618,
											"end": 1716,
											"name": "SWAP7",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1618,
											"end": 1716,
											"name": "SWAP5",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1781,
											"end": 1783,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 1766,
											"end": 1784,
											"name": "DUP8",
											"source": -1
										},
										{
											"begin": 1766,
											"end": 1784,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 1753,
											"end": 1785,
											"name": "CALLDATALOAD",
											"source": -1
										},
										{
											"begin": 1753,
											"end": 1785,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1794,
											"end": 1824,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 1794,
											"end": 1824,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 1794,
											"end": 1824,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 1791,
											"end": 1793,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 1791,
											"end": 1793,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "96"
										},
										{
											"begin": 1791,
											"end": 1793,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP5",
											"source": -1
										},
										{
											"begin": 1827,
											"end": 1839,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 1791,
											"end": 1793,
											"name": "tag",
											"source": -1,
											"value": "96"
										},
										{
											"begin": 1791,
											"end": 1793,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1791,
											"end": 1793,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1865,
											"end": 1945,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "97"
										},
										{
											"begin": 1937,
											"end": 1944,
											"name": "DUP8",
											"source": -1
										},
										{
											"begin": 1928,
											"end": 1934,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 1917,
											"end": 1926,
											"name": "DUP9",
											"source": -1
										},
										{
											"begin": 1913,
											"end": 1935,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 1865,
											"end": 1945,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "84"
										},
										{
											"begin": 1865,
											"end": 1945,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": 1865,
											"end": 1945,
											"name": "tag",
											"source": -1,
											"value": "97"
										},
										{
											"begin": 1865,
											"end": 1945,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1436,
											"end": 1961,
											"name": "SWAP6",
											"source": -1
										},
										{
											"begin": 1436,
											"end": 1961,
											"name": "SWAP9",
											"source": -1
										},
										{
											"begin": 1436,
											"end": 1961,
											"name": "SWAP5",
											"source": -1
										},
										{
											"begin": 1436,
											"end": 1961,
											"name": "SWAP8",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1847,
											"end": 1945,
											"name": "SWAP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1436,
											"end": 1961,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 1968,
											"end": 2209,
											"name": "tag",
											"source": -1,
											"value": "55"
										},
										{
											"begin": 1968,
											"end": 2209,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1968,
											"end": 2209,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2072,
											"end": 2074,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 2060,
											"end": 2069,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 2051,
											"end": 2058,
											"name": "DUP5",
											"source": -1
										},
										{
											"begin": 2047,
											"end": 2070,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2043,
											"end": 2075,
											"name": "SLT",
											"source": -1
										},
										{
											"begin": 2040,
											"end": 2042,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 2040,
											"end": 2042,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "99"
										},
										{
											"begin": 2040,
											"end": 2042,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 2078,
											"end": 2090,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 2040,
											"end": 2042,
											"name": "tag",
											"source": -1,
											"value": "99"
										},
										{
											"begin": 2040,
											"end": 2042,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 978,
											"end": 984,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 965,
											"end": 985,
											"name": "CALLDATALOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10846,
											"end": 10851,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 9991,
											"end": 10037,
											"name": "AND",
											"source": -1
										},
										{
											"begin": 10821,
											"end": 10826,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 10818,
											"end": 10853,
											"name": "EQ",
											"source": -1
										},
										{
											"begin": 10808,
											"end": 10810,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "91"
										},
										{
											"begin": 10808,
											"end": 10810,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 10857,
											"end": 10869,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 2217,
											"end": 2390,
											"name": "tag",
											"source": -1,
											"value": "101"
										},
										{
											"begin": 2217,
											"end": 2390,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10111,
											"end": 10165,
											"name": "AND",
											"source": -1
										},
										{
											"begin": 2790,
											"end": 2827,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 2790,
											"end": 2827,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2379,
											"end": 2383,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 2370,
											"end": 2384,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 2370,
											"end": 2384,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 2297,
											"end": 2390,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 5476,
											"end": 5579,
											"name": "tag",
											"source": -1,
											"value": "103"
										},
										{
											"begin": 5476,
											"end": 5579,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9991,
											"end": 10037,
											"name": "AND",
											"source": -1
										},
										{
											"begin": 5537,
											"end": 5574,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 5537,
											"end": 5574,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 5531,
											"end": 5579,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 5706,
											"end": 5928,
											"name": "tag",
											"source": -1,
											"value": "32"
										},
										{
											"begin": 5706,
											"end": 5928,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10111,
											"end": 10165,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": 10111,
											"end": 10165,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 10111,
											"end": 10165,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": 10111,
											"end": 10165,
											"name": "AND",
											"source": -1
										},
										{
											"begin": 2790,
											"end": 2827,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 2790,
											"end": 2827,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 5833,
											"end": 5835,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 5818,
											"end": 5836,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 5818,
											"end": 5836,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 5804,
											"end": 5928,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 5935,
											"end": 6731,
											"name": "tag",
											"source": -1,
											"value": "59"
										},
										{
											"begin": 5935,
											"end": 6731,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10111,
											"end": 10165,
											"name": "DUP7",
											"source": -1
										},
										{
											"begin": 10111,
											"end": 10165,
											"name": "AND",
											"source": -1
										},
										{
											"begin": 2659,
											"end": 2717,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 2659,
											"end": 2717,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6246,
											"end": 6248,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": 6372,
											"end": 6374,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 6357,
											"end": 6375,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 6357,
											"end": 6375,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 6357,
											"end": 6375,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 6350,
											"end": 6398,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 6350,
											"end": 6398,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 6350,
											"end": 6398,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 5935,
											"end": 6731,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 5935,
											"end": 6731,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": 6231,
											"end": 6249,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 6231,
											"end": 6249,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 6231,
											"end": 6249,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 6231,
											"end": 6249,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 3144,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "107"
										},
										{
											"begin": 3223,
											"end": 3229,
											"name": "DUP9",
											"source": -1
										},
										{
											"begin": 6231,
											"end": 6249,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 3144,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "28"
										},
										{
											"begin": 3144,
											"end": 3230,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": 3144,
											"end": 3230,
											"name": "tag",
											"source": -1,
											"value": "107"
										},
										{
											"begin": 3144,
											"end": 3230,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 3137,
											"end": 3230,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 3137,
											"end": 3230,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3315,
											"end": 3336,
											"name": "DUP9",
											"source": -1
										},
										{
											"begin": 3315,
											"end": 3336,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 3315,
											"end": 3336,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 3342,
											"end": 3633,
											"name": "tag",
											"source": -1,
											"value": "109"
										},
										{
											"begin": 3342,
											"end": 3633,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 3367,
											"end": 3373,
											"name": "DUP9",
											"source": -1
										},
										{
											"begin": 3364,
											"end": 3365,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 3361,
											"end": 3374,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 3342,
											"end": 3633,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 3342,
											"end": 3633,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "111"
										},
										{
											"begin": 3342,
											"end": 3633,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 6372,
											"end": 6374,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 3463,
											"end": 3469,
											"name": "DUP5",
											"source": -1
										},
										{
											"begin": 9584,
											"end": 9596,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 3484,
											"end": 3547,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "112"
										},
										{
											"begin": 3543,
											"end": 3546,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 9558,
											"end": 9597,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "113"
										},
										{
											"begin": 9584,
											"end": 9596,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 3463,
											"end": 3469,
											"name": "DUP9",
											"source": -1
										},
										{
											"begin": 9558,
											"end": 9597,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "81"
										},
										{
											"begin": 9558,
											"end": 9597,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": 9558,
											"end": 9597,
											"name": "tag",
											"source": -1,
											"value": "113"
										},
										{
											"begin": 9558,
											"end": 9597,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 3484,
											"end": 3547,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "101"
										},
										{
											"begin": 3484,
											"end": 3547,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": 3484,
											"end": 3547,
											"name": "tag",
											"source": -1,
											"value": "112"
										},
										{
											"begin": 3484,
											"end": 3547,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 3554,
											"end": 3626,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 3554,
											"end": 3626,
											"name": "SWAP5",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3477,
											"end": 3547,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3389,
											"end": 3390,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 3382,
											"end": 3391,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 3342,
											"end": 3633,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "109"
										},
										{
											"begin": 3342,
											"end": 3633,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 3342,
											"end": 3633,
											"name": "tag",
											"source": -1,
											"value": "111"
										},
										{
											"begin": 3342,
											"end": 3633,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6568,
											"end": 6588,
											"name": "DUP5",
											"source": -1
										},
										{
											"begin": 6568,
											"end": 6588,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 6568,
											"end": 6588,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6563,
											"end": 6565,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": 6548,
											"end": 6566,
											"name": "DUP7",
											"source": -1
										},
										{
											"begin": 6548,
											"end": 6566,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 6541,
											"end": 6589,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 9056,
											"end": 9075,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": 9056,
											"end": 9075,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 9056,
											"end": 9075,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4019,
											"end": 4040,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 4046,
											"end": 4337,
											"name": "tag",
											"source": -1,
											"value": "114"
										},
										{
											"begin": 4046,
											"end": 4337,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 4071,
											"end": 4077,
											"name": "DUP7",
											"source": -1
										},
										{
											"begin": 4068,
											"end": 4069,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 4065,
											"end": 4078,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 4046,
											"end": 4337,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 4046,
											"end": 4337,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "116"
										},
										{
											"begin": 4046,
											"end": 4337,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 978,
											"end": 984,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 965,
											"end": 985,
											"name": "CALLDATALOAD",
											"source": -1
										},
										{
											"begin": 990,
											"end": 1023,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "117"
										},
										{
											"begin": 1017,
											"end": 1022,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 990,
											"end": 1023,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "118"
										},
										{
											"begin": 990,
											"end": 1023,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": 990,
											"end": 1023,
											"name": "tag",
											"source": -1,
											"value": "117"
										},
										{
											"begin": 990,
											"end": 1023,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 2486,
											"end": 2532,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "119"
										},
										{
											"begin": 2528,
											"end": 2531,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": 2520,
											"end": 2526,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 2486,
											"end": 2532,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "103"
										},
										{
											"begin": 2486,
											"end": 2532,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": 2486,
											"end": 2532,
											"name": "tag",
											"source": -1,
											"value": "119"
										},
										{
											"begin": 2486,
											"end": 2532,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2552,
											"end": 2566,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 2552,
											"end": 2566,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 2552,
											"end": 2566,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 2552,
											"end": 2566,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 9712,
											"end": 9724,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 9712,
											"end": 9724,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 9712,
											"end": 9724,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 9712,
											"end": 9724,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 3389,
											"end": 3390,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 4086,
											"end": 4095,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 4046,
											"end": 4337,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "114"
										},
										{
											"begin": 4046,
											"end": 4337,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 4046,
											"end": 4337,
											"name": "tag",
											"source": -1,
											"value": "116"
										},
										{
											"begin": 4046,
											"end": 4337,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6595,
											"end": 6721,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": 6595,
											"end": 6721,
											"name": "SWAP10",
											"source": -1
										},
										{
											"begin": 6217,
											"end": 6731,
											"name": "SWAP9",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6217,
											"end": 6731,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 6738,
											"end": 6948,
											"name": "tag",
											"source": -1,
											"value": "21"
										},
										{
											"begin": 6738,
											"end": 6948,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 9903,
											"end": 9916,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 9903,
											"end": 9916,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 9896,
											"end": 9917,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 4432,
											"end": 4466,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 4432,
											"end": 4466,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6859,
											"end": 6861,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 6844,
											"end": 6862,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 6844,
											"end": 6862,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 6830,
											"end": 6948,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 6955,
											"end": 7371,
											"name": "tag",
											"source": -1,
											"value": "79"
										},
										{
											"begin": 6955,
											"end": 7371,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 7155,
											"end": 7157,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 7169,
											"end": 7216,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 7169,
											"end": 7216,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 7169,
											"end": 7216,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4703,
											"end": 4705,
											"name": "PUSH",
											"source": -1,
											"value": "D"
										},
										{
											"begin": 7140,
											"end": 7158,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 7140,
											"end": 7158,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 7140,
											"end": 7158,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 9056,
											"end": 9075,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1253959053125117D4D6509253"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 4719,
											"end": 4755,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4774,
											"end": 4786,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": 4774,
											"end": 4786,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 4774,
											"end": 4786,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 7126,
											"end": 7371,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 7378,
											"end": 7794,
											"name": "tag",
											"source": -1,
											"value": "65"
										},
										{
											"begin": 7378,
											"end": 7794,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 7578,
											"end": 7580,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 7592,
											"end": 7639,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 7592,
											"end": 7639,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 7592,
											"end": 7639,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 7563,
											"end": 7581,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 7563,
											"end": 7581,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 7563,
											"end": 7581,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 9056,
											"end": 9075,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 5061,
											"end": 5095,
											"name": "PUSH",
											"source": -1,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 5041,
											"end": 5096,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 5115,
											"end": 5127,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": 5115,
											"end": 5127,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 5115,
											"end": 5127,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 7549,
											"end": 7794,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 7801,
											"end": 8217,
											"name": "tag",
											"source": -1,
											"value": "49"
										},
										{
											"begin": 7801,
											"end": 8217,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 8001,
											"end": 8003,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 8015,
											"end": 8062,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 8015,
											"end": 8062,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 8015,
											"end": 8062,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5368,
											"name": "PUSH",
											"source": -1,
											"value": "1A"
										},
										{
											"begin": 7986,
											"end": 8004,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 7986,
											"end": 8004,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 7986,
											"end": 8004,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 9056,
											"end": 9075,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 5402,
											"end": 5430,
											"name": "PUSH",
											"source": -1,
											"value": "494E434F4E53495354454E545F504152414D535F4C454E475448000000000000"
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": 9096,
											"end": 9110,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 5382,
											"end": 5431,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 5450,
											"end": 5462,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": 5450,
											"end": 5462,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 5450,
											"end": 5462,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 7972,
											"end": 8217,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 8224,
											"end": 8446,
											"name": "tag",
											"source": -1,
											"value": "28"
										},
										{
											"begin": 8224,
											"end": 8446,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 5657,
											"end": 5694,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 5657,
											"end": 5694,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 5657,
											"end": 5694,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 8351,
											"end": 8353,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 8336,
											"end": 8354,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": 8336,
											"end": 8354,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 8322,
											"end": 8446,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 10759,
											"end": 10876,
											"name": "tag",
											"source": -1,
											"value": "118"
										},
										{
											"begin": 10759,
											"end": 10876,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10846,
											"end": 10851,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 9991,
											"end": 10037,
											"name": "AND",
											"source": -1
										},
										{
											"begin": 10821,
											"end": 10826,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 10818,
											"end": 10853,
											"name": "EQ",
											"source": -1
										},
										{
											"begin": 10808,
											"end": 10810,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "77"
										},
										{
											"begin": 10808,
											"end": 10810,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 10867,
											"end": 10868,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 10867,
											"end": 10868,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 10857,
											"end": 10869,
											"name": "REVERT",
											"source": -1
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"PERCENTAGE_BASE()": "87c13943",
							"authorizeSybil(address)": "5e91734c",
							"getAssetPrice(address)": "b3596f07",
							"isOwner()": "8f32d59b",
							"isSybilWhitelisted(address)": "30d454f0",
							"owner()": "8da5cb5b",
							"submitPrices(address[],uint128[])": "0e5665e6",
							"unauthorizeSybil(address)": "f2be88cd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sybil\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"prices\",\"type\":\"uint128[]\"}],\"name\":\"PricesSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sybil\",\"type\":\"address\"}],\"name\":\"SybilAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sybil\",\"type\":\"address\"}],\"name\":\"SybilUnauthorized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sybil\",\"type\":\"address\"}],\"name\":\"authorizeSybil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sybil\",\"type\":\"address\"}],\"name\":\"isSybilWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"prices\",\"type\":\"uint128[]\"}],\"name\":\"submitPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sybil\",\"type\":\"address\"}],\"name\":\"unauthorizeSybil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAssetPrice(address)\":{\"details\":\"returns the asset price USD\",\"params\":{\"asset\":\"the address of the asset\"},\"returns\":{\"_0\":\"the price of the asset*\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/MeridianFallback.sol\":\"MeridianFallbackOracle1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/contracts/Dependencies/Ownable.sol\":{\"keccak256\":\"0x33ebd980403ab2462257b6b0352dd42d6d4ae86ce9de8c8fa7b8b5a84c585f1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c164606fdfd19624a7cf85fb8258b1866431a45a208489cd7158db0f132fc212\",\"dweb:/ipfs/QmYsmA6SdwwHSguo2SHDWP9wAxkvb1NPr7Yevw9vGhwCaV\"]},\"contracts/contracts/Dependencies/SafeMath.sol\":{\"keccak256\":\"0x666b890992a066cc791f36c2975cd595d9761a014c654c385ed36ffaf658f3fd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b261f6ac077c4ebc81dd3f4c833f866139acd8b908feff72385c32f83c21c2d\",\"dweb:/ipfs/Qmb91cmmBEFhwUWwVxgxTPmeNxzdiyCdxoVXB2gN3Gvg7e\"]},\"contracts/contracts/Interfaces/IPriceOracleGetter.sol\":{\"keccak256\":\"0xf3f3c38249fd4cb7876f1504137e8d9f5fcb58939fd8a066f705a69ccd9faf8f\",\"license\":\"agpl-3.0\",\"urls\":[\"bzz-raw://f8048ddd04ce34baefd94e05fba049c17e34d947d4d425cf6a614a98a9632b98\",\"dweb:/ipfs/QmZs4Mw1ubnatKbGDeTdntYZzTFe4TNXVbhxLc6xw98PoG\"]},\"contracts/contracts/MeridianFallback.sol\":{\"keccak256\":\"0x315cb4294f6fe9be602b3ac1895cfd7359577c848ff8dc70a494e1c42bbe4eaf\",\"license\":\"agpl-3.0\",\"urls\":[\"bzz-raw://05cf42a99273022d11ee8f46a00e0ead3c70469c62844fca0d055e5d9fa29546\",\"dweb:/ipfs/QmbBgHpebi4EufrZDPA3nTLHGGfxqF3tzZfg1x7c5AeDYr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 4,
								"contract": "contracts/contracts/MeridianFallback.sol:MeridianFallbackOracle1",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 337,
								"contract": "contracts/contracts/MeridianFallback.sol:MeridianFallbackOracle1",
								"label": "_prices",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_struct(Price)312_storage)"
							},
							{
								"astId": 341,
								"contract": "contracts/contracts/MeridianFallback.sol:MeridianFallbackOracle1",
								"label": "_sybils",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_struct(Price)312_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct MeridianFallbackOracle1.Price)",
								"numberOfBytes": "32",
								"value": "t_struct(Price)312_storage"
							},
							"t_struct(Price)312_storage": {
								"encoding": "inplace",
								"label": "struct MeridianFallbackOracle1.Price",
								"members": [
									{
										"astId": 307,
										"contract": "contracts/contracts/MeridianFallback.sol:MeridianFallbackOracle1",
										"label": "blockNumber",
										"offset": 0,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 309,
										"contract": "contracts/contracts/MeridianFallback.sol:MeridianFallbackOracle1",
										"label": "blockTimestamp",
										"offset": 8,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 311,
										"contract": "contracts/contracts/MeridianFallback.sol:MeridianFallbackOracle1",
										"label": "price",
										"offset": 16,
										"slot": "0",
										"type": "t_uint128"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint128": {
								"encoding": "inplace",
								"label": "uint128",
								"numberOfBytes": "16"
							},
							"t_uint64": {
								"encoding": "inplace",
								"label": "uint64",
								"numberOfBytes": "8"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/contracts/Dependencies/Ownable.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/Dependencies/Ownable.sol",
					"exportedSymbols": {
						"Ownable": [
							82
						]
					},
					"id": 83,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.6",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "58:507:0",
								"text": " Based on OpenZeppelin's Ownable contract:\n https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 82,
							"linearizedBaseContracts": [
								82
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 4,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 82,
									"src": "589:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 3,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "589:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 10,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 6,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 10,
												"src": "645:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 5,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 8,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 10,
												"src": "676:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 7,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "676:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "644:57:0"
									},
									"src": "618:84:0"
								},
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "828:95:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 17,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 14,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4,
														"src": "838:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 15,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "847:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 16,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "847:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "838:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 18,
												"nodeType": "ExpressionStatement",
												"src": "838:19:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 22,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "901:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 21,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "893:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 20,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "893:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 23,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "893:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 24,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "905:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 25,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "905:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 19,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "872:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "872:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "EmitStatement",
												"src": "867:49:0"
											}
										]
									},
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "708:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 29,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "816:2:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "828:0:0"
									},
									"scope": 82,
									"src": "804:119:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "1046:30:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 35,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4,
													"src": "1063:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 34,
												"id": 36,
												"nodeType": "Return",
												"src": "1056:13:0"
											}
										]
									},
									"documentation": {
										"id": 30,
										"nodeType": "StructuredDocumentation",
										"src": "929:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 38,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1013:2:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 38,
												"src": "1037:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1037:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1036:9:0"
									},
									"scope": 82,
									"src": "999:77:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 48,
										"nodeType": "Block",
										"src": "1185:82:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 42,
																"name": "isOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 61,
																"src": "1203:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 43,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1203:9:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 44,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1214:34:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 41,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1195:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 45,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1195:54:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 46,
												"nodeType": "ExpressionStatement",
												"src": "1195:54:0"
											},
											{
												"id": 47,
												"nodeType": "PlaceholderStatement",
												"src": "1259:1:0"
											}
										]
									},
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "1082:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 49,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1182:2:0"
									},
									"src": "1164:103:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 60,
										"nodeType": "Block",
										"src": "1396:44:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 55,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "1413:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 56,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "1413:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"id": 57,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4,
														"src": "1427:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1413:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 54,
												"id": 59,
												"nodeType": "Return",
												"src": "1406:27:0"
											}
										]
									},
									"documentation": {
										"id": 50,
										"nodeType": "StructuredDocumentation",
										"src": "1273:72:0",
										"text": " @dev Returns true if the caller is the current owner."
									},
									"functionSelector": "8f32d59b",
									"id": 61,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isOwner",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1366:2:0"
									},
									"returnParameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 61,
												"src": "1390:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 52,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1390:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1389:6:0"
									},
									"scope": 82,
									"src": "1350:90:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 80,
										"nodeType": "Block",
										"src": "1919:91:0",
										"statements": [
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 66,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4,
															"src": "1955:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 69,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1971:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1963:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 67,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1963:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 70,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1963:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 65,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "1934:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1934:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 72,
												"nodeType": "EmitStatement",
												"src": "1929:45:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 78,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 73,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4,
														"src": "1984:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2001:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1993:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 74,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1993:7:0",
																"typeDescriptions": {
																	"typeIdentifier": null,
																	"typeString": null
																}
															}
														},
														"id": 77,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1993:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1984:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 79,
												"nodeType": "ExpressionStatement",
												"src": "1984:19:0"
											}
										]
									},
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "1446:429:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner.\n NOTE: This function is not safe, as it doesnâ€™t check owner is calling it.\n Make sure you check it before calling it."
									},
									"id": 81,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_renounceOwnership",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1907:2:0"
									},
									"returnParameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1919:0:0"
									},
									"scope": 82,
									"src": "1880:130:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 83,
							"src": "566:1446:0"
						}
					],
					"src": "33:1980:0"
				},
				"id": 0
			},
			"contracts/contracts/Dependencies/SafeMath.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/Dependencies/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							278
						]
					},
					"id": 279,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 84,
							"literals": [
								"solidity",
								"0.6",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 85,
								"nodeType": "StructuredDocumentation",
								"src": "58:701:1",
								"text": " Based on OpenZeppelin's SafeMath:\n https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\n @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 278,
							"linearizedBaseContracts": [
								278
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "1072:109:1",
										"statements": [
											{
												"assignments": [
													96
												],
												"declarations": [
													{
														"constant": false,
														"id": 96,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 110,
														"src": "1082:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 95,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1082:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 99,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 97,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 88,
														"src": "1094:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 98,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 90,
														"src": "1098:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1094:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1082:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 104,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 102,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 96,
																"src": "1117:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 103,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 88,
																"src": "1122:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1117:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 105,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1125:29:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 101,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1109:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 106,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1109:46:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 107,
												"nodeType": "ExpressionStatement",
												"src": "1109:46:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 108,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 96,
													"src": "1173:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 94,
												"id": 109,
												"nodeType": "Return",
												"src": "1166:8:1"
											}
										]
									},
									"documentation": {
										"id": 86,
										"nodeType": "StructuredDocumentation",
										"src": "783:217:1",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 111,
												"src": "1018:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 87,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 111,
												"src": "1029:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 89,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1017:22:1"
									},
									"returnParameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 111,
												"src": "1063:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 92,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1063:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1062:9:1"
									},
									"scope": 278,
									"src": "1005:176:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 127,
										"nodeType": "Block",
										"src": "1512:67:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 122,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 114,
															"src": "1533:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 123,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 116,
															"src": "1536:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 124,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1539:32:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 121,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															128,
															156
														],
														"referencedDeclaration": 156,
														"src": "1529:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1529:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 120,
												"id": 126,
												"nodeType": "Return",
												"src": "1522:50:1"
											}
										]
									},
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "1187:253:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 128,
												"src": "1458:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1458:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 128,
												"src": "1469:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1469:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1457:22:1"
									},
									"returnParameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 128,
												"src": "1503:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1503:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1502:9:1"
									},
									"scope": 278,
									"src": "1445:134:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 155,
										"nodeType": "Block",
										"src": "1998:92:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 143,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 141,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "2016:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 142,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 131,
																"src": "2021:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2016:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 144,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 135,
															"src": "2024:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 140,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2008:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:29:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 146,
												"nodeType": "ExpressionStatement",
												"src": "2008:29:1"
											},
											{
												"assignments": [
													148
												],
												"declarations": [
													{
														"constant": false,
														"id": 148,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 155,
														"src": "2047:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 147,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2047:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 152,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 149,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 131,
														"src": "2059:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 150,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "2063:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2059:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2047:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 153,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 148,
													"src": "2082:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 139,
												"id": 154,
												"nodeType": "Return",
												"src": "2075:8:1"
											}
										]
									},
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "1585:313:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow.\n _Available since v2.4.0._"
									},
									"id": 156,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "1916:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1916:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "1927:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1927:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "1938:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 134,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1938:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1915:50:1"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "1989:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1989:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1988:9:1"
									},
									"scope": 278,
									"src": "1903:187:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 190,
										"nodeType": "Block",
										"src": "2397:392:1",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 166,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 159,
														"src": "2629:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 167,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2634:1:1",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2629:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 172,
												"nodeType": "IfStatement",
												"src": "2625:45:1",
												"trueBody": {
													"id": 171,
													"nodeType": "Block",
													"src": "2637:33:1",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 169,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2658:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 165,
															"id": 170,
															"nodeType": "Return",
															"src": "2651:8:1"
														}
													]
												}
											},
											{
												"assignments": [
													174
												],
												"declarations": [
													{
														"constant": false,
														"id": 174,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 190,
														"src": "2680:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 173,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2680:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 178,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 175,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 159,
														"src": "2692:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 176,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "2696:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2692:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2680:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 184,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 182,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 180,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 174,
																	"src": "2715:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 181,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 159,
																	"src": "2719:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2715:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 183,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 161,
																"src": "2724:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2715:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 185,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2727:35:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 179,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2707:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2707:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 187,
												"nodeType": "ExpressionStatement",
												"src": "2707:56:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 188,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 174,
													"src": "2781:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 165,
												"id": 189,
												"nodeType": "Return",
												"src": "2774:8:1"
											}
										]
									},
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "2096:229:1",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 191,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 191,
												"src": "2343:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 191,
												"src": "2354:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2354:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2342:22:1"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 191,
												"src": "2388:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2388:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2387:9:1"
									},
									"scope": 278,
									"src": "2330:459:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 207,
										"nodeType": "Block",
										"src": "3311:63:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 202,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 194,
															"src": "3332:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 203,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 196,
															"src": "3335:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 204,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3338:28:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 201,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															208,
															236
														],
														"referencedDeclaration": 236,
														"src": "3328:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3328:39:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 200,
												"id": 206,
												"nodeType": "Return",
												"src": "3321:46:1"
											}
										]
									},
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "2795:444:1",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 208,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 208,
												"src": "3257:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 193,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3257:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 208,
												"src": "3268:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3268:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3256:22:1"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 208,
												"src": "3302:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3302:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3301:9:1"
									},
									"scope": 278,
									"src": "3244:130:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 235,
										"nodeType": "Block",
										"src": "3984:243:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 223,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 221,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 213,
																"src": "4068:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 222,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4072:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4068:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 224,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "4075:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 220,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4060:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4060:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 226,
												"nodeType": "ExpressionStatement",
												"src": "4060:28:1"
											},
											{
												"assignments": [
													228
												],
												"declarations": [
													{
														"constant": false,
														"id": 228,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 235,
														"src": "4098:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 227,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4098:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 232,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 229,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 211,
														"src": "4110:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 230,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 213,
														"src": "4114:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4110:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4098:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 233,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 228,
													"src": "4219:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 219,
												"id": 234,
												"nodeType": "Return",
												"src": "4212:8:1"
											}
										]
									},
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "3380:504:1",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero.\n _Available since v2.4.0._"
									},
									"id": 236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "3902:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3902:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "3913:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3913:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "3924:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 214,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3924:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3901:50:1"
									},
									"returnParameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "3975:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3975:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3974:9:1"
									},
									"scope": 278,
									"src": "3889:338:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 252,
										"nodeType": "Block",
										"src": "4738:61:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 247,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "4759:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 248,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 241,
															"src": "4762:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 249,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4765:26:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 246,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															253,
															277
														],
														"referencedDeclaration": 277,
														"src": "4755:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4755:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 245,
												"id": 251,
												"nodeType": "Return",
												"src": "4748:44:1"
											}
										]
									},
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "4233:433:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 253,
												"src": "4684:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4684:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 253,
												"src": "4695:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4695:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4683:22:1"
									},
									"returnParameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 253,
												"src": "4729:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 243,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4729:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4728:9:1"
									},
									"scope": 278,
									"src": "4671:128:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 276,
										"nodeType": "Block",
										"src": "5398:68:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 266,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 258,
																"src": "5416:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 267,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5421:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5416:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 269,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 260,
															"src": "5424:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 265,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5408:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5408:29:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 271,
												"nodeType": "ExpressionStatement",
												"src": "5408:29:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 272,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 256,
														"src": "5454:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 273,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 258,
														"src": "5458:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5454:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 264,
												"id": 275,
												"nodeType": "Return",
												"src": "5447:12:1"
											}
										]
									},
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "4805:493:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero.\n _Available since v2.4.0._"
									},
									"id": 277,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 277,
												"src": "5316:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5316:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 277,
												"src": "5327:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5327:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 277,
												"src": "5338:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 259,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5338:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5315:50:1"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 277,
												"src": "5389:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5389:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5388:9:1"
									},
									"scope": 278,
									"src": "5303:163:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 279,
							"src": "760:4708:1"
						}
					],
					"src": "33:5436:1"
				},
				"id": 1
			},
			"contracts/contracts/Interfaces/IPriceOracleGetter.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/Interfaces/IPriceOracleGetter.sol",
					"exportedSymbols": {
						"IPriceOracleGetter": [
							290
						]
					},
					"id": 291,
					"license": "agpl-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 280,
							"literals": [
								"solidity",
								"0.6",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "38:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 281,
								"nodeType": "StructuredDocumentation",
								"src": "63:99:2",
								"text": " @title IPriceOracleGetter interface\n @notice Interface for the Meridian price oracle.*"
							},
							"fullyImplemented": false,
							"id": 290,
							"linearizedBaseContracts": [
								290
							],
							"name": "IPriceOracleGetter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "197:127:2",
										"text": " @dev returns the asset price USD\n @param asset the address of the asset\n @return the price of the asset*"
									},
									"functionSelector": "b3596f07",
									"id": 289,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAssetPrice",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "asset",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 289,
												"src": "350:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "350:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "349:15:2"
									},
									"returnParameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 289,
												"src": "388:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "388:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "387:9:2"
									},
									"scope": 290,
									"src": "327:70:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 291,
							"src": "164:235:2"
						}
					],
					"src": "38:361:2"
				},
				"id": 2
			},
			"contracts/contracts/MeridianFallback.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/MeridianFallback.sol",
					"exportedSymbols": {
						"MeridianFallbackOracle1": [
							492
						]
					},
					"id": 493,
					"license": "agpl-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 292,
							"literals": [
								"solidity",
								"0.6",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "37:23:3"
						},
						{
							"id": 293,
							"literals": [
								"experimental",
								"ABIEncoderV2"
							],
							"nodeType": "PragmaDirective",
							"src": "61:33:3"
						},
						{
							"absolutePath": "contracts/contracts/Dependencies/SafeMath.sol",
							"file": "./Dependencies/SafeMath.sol",
							"id": 295,
							"nodeType": "ImportDirective",
							"scope": 493,
							"sourceUnit": 279,
							"src": "96:53:3",
							"symbolAliases": [
								{
									"foreign": {
										"argumentTypes": null,
										"id": 294,
										"name": "SafeMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": null,
										"src": "104:8:3",
										"typeDescriptions": {
											"typeIdentifier": null,
											"typeString": null
										}
									},
									"local": null
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/Dependencies/Ownable.sol",
							"file": "./Dependencies/Ownable.sol",
							"id": 296,
							"nodeType": "ImportDirective",
							"scope": 493,
							"sourceUnit": 83,
							"src": "150:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/Interfaces/IPriceOracleGetter.sol",
							"file": "./Interfaces/IPriceOracleGetter.sol",
							"id": 298,
							"nodeType": "ImportDirective",
							"scope": 493,
							"sourceUnit": 291,
							"src": "187:71:3",
							"symbolAliases": [
								{
									"foreign": {
										"argumentTypes": null,
										"id": 297,
										"name": "IPriceOracleGetter",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": null,
										"src": "195:18:3",
										"typeDescriptions": {
											"typeIdentifier": null,
											"typeString": null
										}
									},
									"local": null
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 299,
										"name": "Ownable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 82,
										"src": "296:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Ownable_$82",
											"typeString": "contract Ownable"
										}
									},
									"id": 300,
									"nodeType": "InheritanceSpecifier",
									"src": "296:7:3"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 301,
										"name": "IPriceOracleGetter",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 290,
										"src": "305:18:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPriceOracleGetter_$290",
											"typeString": "contract IPriceOracleGetter"
										}
									},
									"id": 302,
									"nodeType": "InheritanceSpecifier",
									"src": "305:18:3"
								}
							],
							"contractDependencies": [
								82,
								290
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 492,
							"linearizedBaseContracts": [
								492,
								290,
								82
							],
							"name": "MeridianFallbackOracle1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 305,
									"libraryName": {
										"contractScope": null,
										"id": 303,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 278,
										"src": "334:8:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$278",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "328:27:3",
									"typeName": {
										"id": 304,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "347:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "MeridianFallbackOracle1.Price",
									"id": 312,
									"members": [
										{
											"constant": false,
											"id": 307,
											"mutability": "mutable",
											"name": "blockNumber",
											"nodeType": "VariableDeclaration",
											"overrides": null,
											"scope": 312,
											"src": "378:18:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 306,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "378:6:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 309,
											"mutability": "mutable",
											"name": "blockTimestamp",
											"nodeType": "VariableDeclaration",
											"overrides": null,
											"scope": 312,
											"src": "402:21:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 308,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "402:6:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 311,
											"mutability": "mutable",
											"name": "price",
											"nodeType": "VariableDeclaration",
											"overrides": null,
											"scope": 312,
											"src": "429:13:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 310,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "429:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"value": null,
											"visibility": "internal"
										}
									],
									"name": "Price",
									"nodeType": "StructDefinition",
									"scope": 492,
									"src": "359:88:3",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 322,
									"name": "PricesSubmitted",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 314,
												"indexed": false,
												"mutability": "mutable",
												"name": "sybil",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 322,
												"src": "473:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 313,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "473:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 322,
												"src": "488:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 315,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "488:7:3",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 316,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "488:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 320,
												"indexed": false,
												"mutability": "mutable",
												"name": "prices",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 322,
												"src": "506:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint128_$dyn_memory_ptr",
													"typeString": "uint128[]"
												},
												"typeName": {
													"baseType": {
														"id": 318,
														"name": "uint128",
														"nodeType": "ElementaryTypeName",
														"src": "506:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"id": 319,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "506:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint128_$dyn_storage_ptr",
														"typeString": "uint128[]"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "472:51:3"
									},
									"src": "451:73:3"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 326,
									"name": "SybilAuthorized",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 324,
												"indexed": true,
												"mutability": "mutable",
												"name": "sybil",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 326,
												"src": "549:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 323,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "548:23:3"
									},
									"src": "527:45:3"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 330,
									"name": "SybilUnauthorized",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 328,
												"indexed": true,
												"mutability": "mutable",
												"name": "sybil",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 330,
												"src": "599:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "599:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "598:23:3"
									},
									"src": "575:47:3"
								},
								{
									"constant": true,
									"functionSelector": "87c13943",
									"id": 333,
									"mutability": "constant",
									"name": "PERCENTAGE_BASE",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 492,
									"src": "626:45:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 331,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "626:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "316534",
										"id": 332,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "668:3:3",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_10000_by_1",
											"typeString": "int_const 10000"
										},
										"value": "1e4"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 337,
									"mutability": "mutable",
									"name": "_prices",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 492,
									"src": "676:41:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Price_$312_storage_$",
										"typeString": "mapping(address => struct MeridianFallbackOracle1.Price)"
									},
									"typeName": {
										"id": 336,
										"keyType": {
											"id": 334,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "684:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "676:25:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Price_$312_storage_$",
											"typeString": "mapping(address => struct MeridianFallbackOracle1.Price)"
										},
										"valueType": {
											"contractScope": null,
											"id": 335,
											"name": "Price",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 312,
											"src": "695:5:3",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Price_$312_storage_ptr",
												"typeString": "struct MeridianFallbackOracle1.Price"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 341,
									"mutability": "mutable",
									"name": "_sybils",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 492,
									"src": "722:40:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 340,
										"keyType": {
											"id": 338,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "730:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "722:24:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 339,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "741:4:3",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 349,
										"nodeType": "Block",
										"src": "786:54:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 344,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "817:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "817:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 343,
														"name": "_requireWhitelistedSybil",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 491,
														"src": "792:24:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$__$",
															"typeString": "function (address) view"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "792:36:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 347,
												"nodeType": "ExpressionStatement",
												"src": "792:36:3"
											},
											{
												"id": 348,
												"nodeType": "PlaceholderStatement",
												"src": "834:1:3"
											}
										]
									},
									"documentation": null,
									"id": 350,
									"name": "onlySybil",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "786:0:3"
									},
									"src": "767:73:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 367,
										"nodeType": "Block",
										"src": "902:66:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 357,
															"name": "_sybils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "908:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 359,
														"indexExpression": {
															"argumentTypes": null,
															"id": 358,
															"name": "sybil",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "916:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "908:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "74727565",
														"id": 360,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "925:4:3",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "908:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 362,
												"nodeType": "ExpressionStatement",
												"src": "908:21:3"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 364,
															"name": "sybil",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "957:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 363,
														"name": "SybilAuthorized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 326,
														"src": "941:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "941:22:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 366,
												"nodeType": "EmitStatement",
												"src": "936:27:3"
											}
										]
									},
									"documentation": null,
									"functionSelector": "5e91734c",
									"id": 368,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 355,
											"modifierName": {
												"argumentTypes": null,
												"id": 354,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 49,
												"src": "892:9:3",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "892:9:3"
										}
									],
									"name": "authorizeSybil",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "sybil",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 368,
												"src": "868:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "868:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "867:15:3"
									},
									"returnParameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "902:0:3"
									},
									"scope": 492,
									"src": "844:124:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 385,
										"nodeType": "Block",
										"src": "1032:69:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 375,
															"name": "_sybils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "1038:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 377,
														"indexExpression": {
															"argumentTypes": null,
															"id": 376,
															"name": "sybil",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 370,
															"src": "1046:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1038:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "66616c7365",
														"id": 378,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1055:5:3",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1038:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 380,
												"nodeType": "ExpressionStatement",
												"src": "1038:22:3"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 382,
															"name": "sybil",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 370,
															"src": "1090:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 381,
														"name": "SybilUnauthorized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "1072:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1072:24:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 384,
												"nodeType": "EmitStatement",
												"src": "1067:29:3"
											}
										]
									},
									"documentation": null,
									"functionSelector": "f2be88cd",
									"id": 386,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 373,
											"modifierName": {
												"argumentTypes": null,
												"id": 372,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 49,
												"src": "1022:9:3",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1022:9:3"
										}
									],
									"name": "unauthorizeSybil",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "sybil",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 386,
												"src": "998:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "998:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "997:15:3"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1032:0:3"
									},
									"scope": 492,
									"src": "972:129:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 448,
										"nodeType": "Block",
										"src": "1200:283:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 398,
																	"name": "assets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 389,
																	"src": "1214:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																		"typeString": "address[] calldata"
																	}
																},
																"id": 399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1214:13:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 400,
																	"name": "prices",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 392,
																	"src": "1231:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint128_$dyn_calldata_ptr",
																		"typeString": "uint128[] calldata"
																	}
																},
																"id": 401,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1231:13:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1214:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "494e434f4e53495354454e545f504152414d535f4c454e475448",
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1246:28:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a807dff59d3474096247bf1cf10d6df8b988b576943ecf8c7dd58f40a940e704",
																"typeString": "literal_string \"INCONSISTENT_PARAMS_LENGTH\""
															},
															"value": "INCONSISTENT_PARAMS_LENGTH"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a807dff59d3474096247bf1cf10d6df8b988b576943ecf8c7dd58f40a940e704",
																"typeString": "literal_string \"INCONSISTENT_PARAMS_LENGTH\""
															}
														],
														"id": 397,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1206:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1206:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 405,
												"nodeType": "ExpressionStatement",
												"src": "1206:69:3"
											},
											{
												"body": {
													"id": 439,
													"nodeType": "Block",
													"src": "1325:99:3",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 437,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 417,
																		"name": "_prices",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 337,
																		"src": "1333:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Price_$312_storage_$",
																			"typeString": "mapping(address => struct MeridianFallbackOracle1.Price storage ref)"
																		}
																	},
																	"id": 421,
																	"indexExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 418,
																			"name": "assets",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 389,
																			"src": "1341:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																				"typeString": "address[] calldata"
																			}
																		},
																		"id": 420,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 419,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 407,
																			"src": "1348:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1341:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1333:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Price_$312_storage",
																		"typeString": "struct MeridianFallbackOracle1.Price storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"expression": {
																						"argumentTypes": null,
																						"id": 425,
																						"name": "block",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": -4,
																						"src": "1367:5:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_block",
																							"typeString": "block"
																						}
																					},
																					"id": 426,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "number",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": null,
																					"src": "1367:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 424,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "1360:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 423,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "1360:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": null,
																						"typeString": null
																					}
																				}
																			},
																			"id": 427,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1360:20:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint64",
																				"typeString": "uint64"
																			}
																		},
																		{
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"expression": {
																						"argumentTypes": null,
																						"id": 430,
																						"name": "block",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": -4,
																						"src": "1389:5:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_block",
																							"typeString": "block"
																						}
																					},
																					"id": 431,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "timestamp",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": null,
																					"src": "1389:15:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 429,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "1382:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 428,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "1382:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": null,
																						"typeString": null
																					}
																				}
																			},
																			"id": 432,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1382:23:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint64",
																				"typeString": "uint64"
																			}
																		},
																		{
																			"argumentTypes": null,
																			"baseExpression": {
																				"argumentTypes": null,
																				"id": 433,
																				"name": "prices",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 392,
																				"src": "1407:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint128_$dyn_calldata_ptr",
																					"typeString": "uint128[] calldata"
																				}
																			},
																			"id": 435,
																			"indexExpression": {
																				"argumentTypes": null,
																				"id": 434,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 407,
																				"src": "1414:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "1407:9:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint64",
																				"typeString": "uint64"
																			},
																			{
																				"typeIdentifier": "t_uint64",
																				"typeString": "uint64"
																			},
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		],
																		"id": 422,
																		"name": "Price",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 312,
																		"src": "1354:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_struct$_Price_$312_storage_ptr_$",
																			"typeString": "type(struct MeridianFallbackOracle1.Price storage pointer)"
																		}
																	},
																	"id": 436,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "structConstructorCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1354:63:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Price_$312_memory_ptr",
																		"typeString": "struct MeridianFallbackOracle1.Price memory"
																	}
																},
																"src": "1333:84:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Price_$312_storage",
																	"typeString": "struct MeridianFallbackOracle1.Price storage ref"
																}
															},
															"id": 438,
															"nodeType": "ExpressionStatement",
															"src": "1333:84:3"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 413,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 410,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 407,
														"src": "1301:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 411,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "1305:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																"typeString": "address[] calldata"
															}
														},
														"id": 412,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "1305:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1301:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 440,
												"initializationExpression": {
													"assignments": [
														407
													],
													"declarations": [
														{
															"constant": false,
															"id": 407,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"overrides": null,
															"scope": 440,
															"src": "1286:9:3",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 406,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1286:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"value": null,
															"visibility": "internal"
														}
													],
													"id": 409,
													"initialValue": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 408,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1298:1:3",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1286:13:3"
												},
												"loopExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 415,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1320:3:3",
														"subExpression": {
															"argumentTypes": null,
															"id": 414,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "1320:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 416,
													"nodeType": "ExpressionStatement",
													"src": "1320:3:3"
												},
												"nodeType": "ForStatement",
												"src": "1281:143:3"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 442,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "1451:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "1451:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 444,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "1463:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																"typeString": "address[] calldata"
															}
														},
														{
															"argumentTypes": null,
															"id": 445,
															"name": "prices",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 392,
															"src": "1471:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint128_$dyn_calldata_ptr",
																"typeString": "uint128[] calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																"typeString": "address[] calldata"
															},
															{
																"typeIdentifier": "t_array$_t_uint128_$dyn_calldata_ptr",
																"typeString": "uint128[] calldata"
															}
														],
														"id": 441,
														"name": "PricesSubmitted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 322,
														"src": "1435:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint128_$dyn_memory_ptr_$returns$__$",
															"typeString": "function (address,address[] memory,uint128[] memory)"
														}
													},
													"id": 446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1435:43:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 447,
												"nodeType": "EmitStatement",
												"src": "1430:48:3"
											}
										]
									},
									"documentation": null,
									"functionSelector": "0e5665e6",
									"id": 449,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 395,
											"modifierName": {
												"argumentTypes": null,
												"id": 394,
												"name": "onlySybil",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 350,
												"src": "1190:9:3",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1190:9:3"
										}
									],
									"name": "submitPrices",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "assets",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 449,
												"src": "1127:25:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 387,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1127:7:3",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 388,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "1127:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "prices",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 449,
												"src": "1154:25:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint128_$dyn_calldata_ptr",
													"typeString": "uint128[]"
												},
												"typeName": {
													"baseType": {
														"id": 390,
														"name": "uint128",
														"nodeType": "ElementaryTypeName",
														"src": "1154:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"id": 391,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "1154:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint128_$dyn_storage_ptr",
														"typeString": "uint128[]"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1126:54:3"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1200:0:3"
									},
									"scope": 492,
									"src": "1105:378:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										289
									],
									"body": {
										"id": 465,
										"nodeType": "Block",
										"src": "1566:47:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 459,
																	"name": "_prices",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 337,
																	"src": "1587:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Price_$312_storage_$",
																		"typeString": "mapping(address => struct MeridianFallbackOracle1.Price storage ref)"
																	}
																},
																"id": 461,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 460,
																	"name": "asset",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 451,
																	"src": "1595:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1587:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Price_$312_storage",
																	"typeString": "struct MeridianFallbackOracle1.Price storage ref"
																}
															},
															"id": 462,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "price",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 311,
															"src": "1587:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														],
														"id": 458,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1579:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 457,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1579:7:3",
															"typeDescriptions": {
																"typeIdentifier": null,
																"typeString": null
															}
														}
													},
													"id": 463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1579:29:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 456,
												"id": 464,
												"nodeType": "Return",
												"src": "1572:36:3"
											}
										]
									},
									"documentation": null,
									"functionSelector": "b3596f07",
									"id": 466,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAssetPrice",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 453,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1539:8:3"
									},
									"parameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "asset",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 466,
												"src": "1510:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 450,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1510:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1509:15:3"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 466,
												"src": "1557:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1556:9:3"
									},
									"scope": 492,
									"src": "1487:126:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 477,
										"nodeType": "Block",
										"src": "1687:32:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 473,
														"name": "_sybils",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "1700:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 475,
													"indexExpression": {
														"argumentTypes": null,
														"id": 474,
														"name": "sybil",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 468,
														"src": "1708:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1700:14:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 472,
												"id": 476,
												"nodeType": "Return",
												"src": "1693:21:3"
											}
										]
									},
									"documentation": null,
									"functionSelector": "30d454f0",
									"id": 478,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isSybilWhitelisted",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "sybil",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 478,
												"src": "1645:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1645:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1644:15:3"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 478,
												"src": "1681:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 470,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1681:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1680:6:3"
									},
									"scope": 492,
									"src": "1617:102:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 490,
										"nodeType": "Block",
										"src": "1787:62:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 485,
																	"name": "sybil",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 480,
																	"src": "1820:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 484,
																"name": "isSybilWhitelisted",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 478,
																"src": "1801:18:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1801:25:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "494e56414c49445f535942494c",
															"id": 487,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1828:15:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5ed7715dc04b6e2f92b79fd26323bce51347c2cbb23101c46ebcd4d363bea725",
																"typeString": "literal_string \"INVALID_SYBIL\""
															},
															"value": "INVALID_SYBIL"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5ed7715dc04b6e2f92b79fd26323bce51347c2cbb23101c46ebcd4d363bea725",
																"typeString": "literal_string \"INVALID_SYBIL\""
															}
														],
														"id": 483,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1793:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1793:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 489,
												"nodeType": "ExpressionStatement",
												"src": "1793:51:3"
											}
										]
									},
									"documentation": null,
									"id": 491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireWhitelistedSybil",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "sybil",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 491,
												"src": "1758:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1758:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1757:15:3"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1787:0:3"
									},
									"scope": 492,
									"src": "1724:125:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 493,
							"src": "260:1591:3"
						}
					],
					"src": "37:1814:3"
				},
				"id": 3
			}
		}
	}
}