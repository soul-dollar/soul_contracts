{
	"id": "a58ff692d170a6da4b580fe6076d3994",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Dependencies/CheckContract.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.20;\n\n\ncontract CheckContract {\n    /**\n     * Check that the account is an already deployed non-destroyed contract.\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\n     */\n    function checkContract(address _account) internal view {\n        require(_account != address(0), \"Account cannot be zero address\");\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(_account) }\n        require(size > 0, \"Account code size cannot be zero\");\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [],
			"evmVersion": "paris"
		}
	},
	"output": {
		"contracts": {
			"contracts/Dependencies/CheckContract.sol": {
				"CheckContract": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Dependencies/CheckContract.sol\":59:624  contract CheckContract {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Dependencies/CheckContract.sol\":59:624  contract CheckContract {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122056e1f71b706fd727a5b2e155919774099e52cf508fc2a6be5d2a4e46c7f1b3dc64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122056e1f71b706fd727a5b2e155919774099e52cf508fc2a6be5d2a4e46c7f1b3dc64736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP 0xE1 0xF7 SHL PUSH17 0x6FD727A5B2E155919774099E52CF508FC2 0xA6 0xBE 0x5D 0x2A 0x4E CHAINID 0xC7 CALL 0xB3 0xDC PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "59:565:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea264697066735822122056e1f71b706fd727a5b2e155919774099e52cf508fc2a6be5d2a4e46c7f1b3dc64736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP 0xE1 0xF7 SHL PUSH17 0x6FD727A5B2E155919774099E52CF508FC2 0xA6 0xBE 0x5D 0x2A 0x4E CHAINID 0xC7 CALL 0xB3 0xDC PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "59:565:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							},
							"internal": {
								"checkContract(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 59,
									"end": 624,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 59,
									"end": 624,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 59,
									"end": 624,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 59,
									"end": 624,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 624,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 59,
									"end": 624,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 59,
									"end": 624,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 59,
									"end": 624,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 624,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 59,
									"end": 624,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 624,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122056e1f71b706fd727a5b2e155919774099e52cf508fc2a6be5d2a4e46c7f1b3dc64736f6c63430008140033",
									".code": [
										{
											"begin": 59,
											"end": 624,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 59,
											"end": 624,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 59,
											"end": 624,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 59,
											"end": 624,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 59,
											"end": 624,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 59,
											"end": 624,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/Dependencies/CheckContract.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dependencies/CheckContract.sol\":\"CheckContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Dependencies/CheckContract.sol\":{\"keccak256\":\"0x3d727343212eec99341f951958429d9aeaac76456b206b8fe7ceb893eaef9df9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c2a2e2f03fc3edfa72d9d11ddeb1b66b46c4985c53d42d0cf7b887faf43174e3\",\"dweb:/ipfs/QmSsXcCENwCskWjPnVBuZKRcHqbStdLFnS8H6464uFmoJt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/Dependencies/CheckContract.sol": {
				"ast": {
					"absolutePath": "contracts/Dependencies/CheckContract.sol",
					"exportedSymbols": {
						"CheckContract": [
							30
						]
					},
					"id": 31,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CheckContract",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 30,
							"linearizedBaseContracts": [
								30
							],
							"name": "CheckContract",
							"nameLocation": "68:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "347:275:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 13,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 8,
																"name": "_account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4,
																"src": "365:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 11,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "385:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 10,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "377:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 9,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "377:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 12,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "377:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "365:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4163636f756e742063616e6e6f74206265207a65726f2061646472657373",
															"id": 14,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "389:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_71630fb59e6335519b5c714c347f2b3d00653f9607ebc84cc566a5b693547569",
																"typeString": "literal_string \"Account cannot be zero address\""
															},
															"value": "Account cannot be zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_71630fb59e6335519b5c714c347f2b3d00653f9607ebc84cc566a5b693547569",
																"typeString": "literal_string \"Account cannot be zero address\""
															}
														],
														"id": 7,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "357:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 15,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "357:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 16,
												"nodeType": "ExpressionStatement",
												"src": "357:65:0"
											},
											{
												"assignments": [
													18
												],
												"declarations": [
													{
														"constant": false,
														"id": 18,
														"mutability": "mutable",
														"name": "size",
														"nameLocation": "441:4:0",
														"nodeType": "VariableDeclaration",
														"scope": 28,
														"src": "433:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 17,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "433:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 19,
												"nodeType": "VariableDeclarationStatement",
												"src": "433:12:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "520:33:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "522:29:0",
															"value": {
																"arguments": [
																	{
																		"name": "_account",
																		"nodeType": "YulIdentifier",
																		"src": "542:8:0"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "530:11:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "530:21:0"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "522:4:0"
																}
															]
														}
													]
												},
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 4,
														"isOffset": false,
														"isSlot": false,
														"src": "542:8:0",
														"valueSize": 1
													},
													{
														"declaration": 18,
														"isOffset": false,
														"isSlot": false,
														"src": "522:4:0",
														"valueSize": 1
													}
												],
												"id": 20,
												"nodeType": "InlineAssembly",
												"src": "511:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 24,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 22,
																"name": "size",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 18,
																"src": "570:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 23,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "577:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "570:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f",
															"id": 25,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "580:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_dcf7beb71f973a2a4b4f293fe67c3b380ce91c14fb11529cf06f13e17f4fde3b",
																"typeString": "literal_string \"Account code size cannot be zero\""
															},
															"value": "Account code size cannot be zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_dcf7beb71f973a2a4b4f293fe67c3b380ce91c14fb11529cf06f13e17f4fde3b",
																"typeString": "literal_string \"Account code size cannot be zero\""
															}
														],
														"id": 21,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "562:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "562:53:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "562:53:0"
											}
										]
									},
									"documentation": {
										"id": 2,
										"nodeType": "StructuredDocumentation",
										"src": "88:199:0",
										"text": " Check that the account is an already deployed non-destroyed contract.\n See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12"
									},
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkContract",
									"nameLocation": "301:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"mutability": "mutable",
												"name": "_account",
												"nameLocation": "323:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "315:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "315:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "314:18:0"
									},
									"returnParameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "347:0:0"
									},
									"scope": 30,
									"src": "292:330:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 31,
							"src": "59:565:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:592:0"
				},
				"id": 0
			}
		}
	}
}